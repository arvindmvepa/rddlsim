domain game_of_life_pomdp {
  requirements = {
    reward-deterministic,
    partially-observed
  };
  types {
    y_pos : object;
    x_pos : object;
  };
  pvariables {
    set(x_pos, y_pos) : {action-fluent, bool, default = false};
    NOISE-PROB(x_pos, y_pos) : {non-fluent, real, default = 0.1};
    surround-obs(x_pos, y_pos) : {observ-fluent, bool};
    alive(x_pos, y_pos) : {state-fluent, bool, default = false};
    NEIGHBOR(x_pos, y_pos, x_pos, y_pos) : {non-fluent, bool, default = false};
  };
  cpfs {
    (surround-obs ?x ?y) = (if (>= (sum ( (?x2 : x_pos) (?y2 : y_pos) ) (^ (NEIGHBOR ?x ?y ?x2 ?y2) (alive' ?x2 ?y2) )) 2) then (Bernoulli 0.8) else (Bernoulli 0.2));
    (alive' ?x ?y) = (if (| (^ (alive ?x ?y) (>= (sum ( (?x2 : x_pos) (?y2 : y_pos) ) (^ (NEIGHBOR ?x ?y ?x2 ?y2) (alive ?x2 ?y2) )) 2) (<= (sum ( (?x2 : x_pos) (?y2 : y_pos) ) (^ (NEIGHBOR ?x ?y ?x2 ?y2) (alive ?x2 ?y2) )) 3) ) (^ (~ (alive ?x ?y)) (== (sum ( (?x2 : x_pos) (?y2 : y_pos) ) (^ (NEIGHBOR ?x ?y ?x2 ?y2) (alive ?x2 ?y2) )) 3) ) (set ?x ?y) ) then (Bernoulli (- 1.0 (NOISE-PROB ?x ?y))) else (Bernoulli (NOISE-PROB ?x ?y)));
  };
  reward = (sum ( (?x : x_pos) (?y : y_pos) ) (- (alive ?x ?y) (set ?x ?y)));
  state-action-constraints {
    (forall ( (?x : x_pos) (?y : y_pos) ) (^ (>= (NOISE-PROB ?x ?y) 0.0) (<= (NOISE-PROB ?x ?y) 1.0) ));
  };
}

non-fluents game2p {
  domain = game_of_life_pomdp;
  objects {
    y_pos : {y1, y2};
    x_pos : {x1, x2};
  };
  non-fluents {
    NEIGHBOR(x1, y1, x1, y2);
    NEIGHBOR(x1, y1, x2, y1);
    NEIGHBOR(x1, y1, x2, y2);
    NEIGHBOR(x1, y2, x1, y1);
    NEIGHBOR(x1, y2, x2, y1);
    NEIGHBOR(x1, y2, x2, y2);
    NEIGHBOR(x2, y1, x1, y1);
    NEIGHBOR(x2, y1, x1, y2);
    NEIGHBOR(x2, y1, x2, y2);
    NEIGHBOR(x2, y2, x1, y1);
    NEIGHBOR(x2, y2, x1, y2);
    NEIGHBOR(x2, y2, x2, y1);
  };
}

non-fluents game3p {
  domain = game_of_life_pomdp;
  objects {
    y_pos : {y1, y2, y3};
    x_pos : {x1, x2, x3};
  };
  non-fluents {
    NEIGHBOR(x1, y1, x1, y2);
    NEIGHBOR(x1, y1, x2, y1);
    NEIGHBOR(x1, y1, x2, y2);
    NEIGHBOR(x1, y2, x1, y1);
    NEIGHBOR(x1, y2, x2, y1);
    NEIGHBOR(x1, y2, x2, y2);
    NEIGHBOR(x1, y2, x2, y3);
    NEIGHBOR(x1, y2, x1, y3);
    NEIGHBOR(x1, y3, x1, y2);
    NEIGHBOR(x1, y3, x2, y2);
    NEIGHBOR(x1, y3, x2, y3);
    NEIGHBOR(x2, y1, x1, y1);
    NEIGHBOR(x2, y1, x1, y2);
    NEIGHBOR(x2, y1, x2, y2);
    NEIGHBOR(x2, y1, x3, y2);
    NEIGHBOR(x2, y1, x3, y1);
    NEIGHBOR(x2, y2, x1, y1);
    NEIGHBOR(x2, y2, x1, y2);
    NEIGHBOR(x2, y2, x1, y3);
    NEIGHBOR(x2, y2, x2, y1);
    NEIGHBOR(x2, y2, x2, y3);
    NEIGHBOR(x2, y2, x3, y1);
    NEIGHBOR(x2, y2, x3, y2);
    NEIGHBOR(x2, y2, x3, y3);
    NEIGHBOR(x2, y3, x1, y3);
    NEIGHBOR(x2, y3, x1, y2);
    NEIGHBOR(x2, y3, x2, y2);
    NEIGHBOR(x2, y3, x3, y2);
    NEIGHBOR(x2, y3, x3, y3);
    NEIGHBOR(x3, y1, x2, y1);
    NEIGHBOR(x3, y1, x2, y2);
    NEIGHBOR(x3, y1, x3, y2);
    NEIGHBOR(x3, y2, x3, y1);
    NEIGHBOR(x3, y2, x2, y1);
    NEIGHBOR(x3, y2, x2, y2);
    NEIGHBOR(x3, y2, x2, y3);
    NEIGHBOR(x3, y2, x3, y3);
    NEIGHBOR(x3, y3, x2, y3);
    NEIGHBOR(x3, y3, x2, y2);
    NEIGHBOR(x3, y3, x3, y2);
  };
}

instance glp1 {
  domain = game_of_life_pomdp;
  non-fluents = game2p;
  init-state {
    alive(x1, y1);
    alive(x2, y2);
  };
  max-nondef-actions = 1;
  horizon = 20;
  discount = 1.0;
}

instance glp2 {
  domain = game_of_life_pomdp;
  non-fluents = game3p;
  init-state {
    alive(x1, y1);
    alive(x1, y3);
    alive(x2, y2);
    alive(x3, y1);
    alive(x3, y3);
  };
  max-nondef-actions = 1;
  horizon = 20;
  discount = 1.0;
}

