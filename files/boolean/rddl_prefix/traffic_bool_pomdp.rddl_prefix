domain traffic_binary_ctm_pomdp {
  requirements = {
    reward-deterministic,
    concurrent,
    constrained-state,
    partially-observed
  };
  types {
    intersection : object;
    cell : object;
  };
  pvariables {
    FLOWS-INTO-INTERSECTION-EW(cell, intersection) : {non-fluent, bool, default = false};
    occupied(cell) : {state-fluent, bool, default = false};
    FLOWS-INTO-INTERSECTION-NS(cell, intersection) : {non-fluent, bool, default = false};
    FLOWS-INTO-CELL(cell, cell) : {non-fluent, bool, default = false};
    traffic-at-stopline-EW-obs(intersection) : {observ-fluent, bool};
    light-signal1(intersection) : {state-fluent, bool, default = false};
    light-signal2(intersection) : {state-fluent, bool, default = false};
    PERIMETER-EXIT-CELL(cell) : {non-fluent, bool, default = false};
    PERIMETER-INPUT-CELL(cell) : {non-fluent, bool, default = false};
    traffic-at-stopline-NS-obs(intersection) : {observ-fluent, bool};
    advance(intersection) : {action-fluent, bool, default = false};
    PERIMETER-INPUT-RATE(cell) : {non-fluent, real, default = 1.0};
  };
  cpfs {
    (occupied' ?c) = (if (PERIMETER-INPUT-CELL ?c) then (if (~ (occupied ?c)) then (Bernoulli (PERIMETER-INPUT-RATE ?c)) else (if (exists ( (?c2 : cell) ) (^ (FLOWS-INTO-CELL ?c ?c2) (~ (occupied ?c2)) )) then (KronDelta false) else (KronDelta true))) else (if (| (exists ( (?i : intersection) (?c2 : cell) ) (^ (light-signal2 ?i) (~ (light-signal1 ?i)) (FLOWS-INTO-INTERSECTION-NS ?c ?i) (FLOWS-INTO-CELL ?c ?c2) (~ (occupied ?c2)) )) (exists ( (?i : intersection) (?c2 : cell) ) (^ (light-signal1 ?i) (~ (light-signal2 ?i)) (FLOWS-INTO-INTERSECTION-EW ?c ?i) (FLOWS-INTO-CELL ?c ?c2) (~ (occupied ?c2)) )) ) then (if (~ (occupied ?c)) then (KronDelta (exists ( (?c2 : cell) ) (^ (FLOWS-INTO-CELL ?c2 ?c) (occupied ?c2) ))) else (KronDelta false)) else (if (exists ( (?i : intersection) ) (| (FLOWS-INTO-INTERSECTION-NS ?c ?i) (FLOWS-INTO-INTERSECTION-EW ?c ?i) )) then (KronDelta true) else (if (exists ( (?i : intersection) (?c2 : cell) ) (^ (| (FLOWS-INTO-INTERSECTION-NS ?c2 ?i) (FLOWS-INTO-INTERSECTION-EW ?c2 ?i) ) (FLOWS-INTO-CELL ?c2 ?c) )) then (if (occupied ?c) then (KronDelta (~ (exists ( (?c2 : cell) ) (^ (FLOWS-INTO-CELL ?c ?c2) (~ (occupied ?c2)) )))) else (KronDelta (| (exists ( (?i : intersection) (?c2 : cell) ) (^ (light-signal2 ?i) (~ (light-signal1 ?i)) (FLOWS-INTO-INTERSECTION-NS ?c2 ?i) (FLOWS-INTO-CELL ?c2 ?c) (occupied ?c2) )) (exists ( (?i : intersection) (?c2 : cell) ) (^ (light-signal1 ?i) (~ (light-signal2 ?i)) (FLOWS-INTO-INTERSECTION-EW ?c2 ?i) (FLOWS-INTO-CELL ?c2 ?c) (occupied ?c2) )) ))) else (if (occupied ?c) then (KronDelta (^ (~ (PERIMETER-EXIT-CELL ?c)) (~ (exists ( (?c2 : cell) ) (^ (FLOWS-INTO-CELL ?c ?c2) (~ (occupied ?c2)) ))) )) else (KronDelta (exists ( (?c2 : cell) ) (^ (FLOWS-INTO-CELL ?c2 ?c) (occupied ?c2) ))))))));
    (traffic-at-stopline-EW-obs ?i) = (KronDelta (exists ( (?c : cell) ) (^ (FLOWS-INTO-INTERSECTION-EW ?c ?i) (occupied' ?c) )));
    (light-signal1' ?i) = (if (| (advance ?i) (^ (light-signal1 ?i) (light-signal2 ?i) ) (^ (~ (light-signal1 ?i)) (~ (light-signal2 ?i)) ) ) then (KronDelta (light-signal2 ?i)) else (KronDelta (light-signal1 ?i)));
    (light-signal2' ?i) = (if (| (advance ?i) (^ (light-signal1 ?i) (light-signal2 ?i) ) (^ (~ (light-signal1 ?i)) (~ (light-signal2 ?i)) ) ) then (KronDelta (~ (light-signal1 ?i))) else (KronDelta (light-signal2 ?i)));
    (traffic-at-stopline-NS-obs ?i) = (KronDelta (exists ( (?c : cell) ) (^ (FLOWS-INTO-INTERSECTION-NS ?c ?i) (occupied' ?c) )));
  };
  reward = (sum ( (?c : cell) ) (- 0 (occupied ?c)));
  state-action-constraints {
    (forall ( (?c : cell) ) (>= (PERIMETER-INPUT-RATE ?c) 0.0));
    (forall ( (?c : cell) ) (<= (PERIMETER-INPUT-RATE ?c) 1.0));
    (forall ( (?c : cell) ) (=> (~ (PERIMETER-INPUT-CELL ?c)) (== (sum ( (?c2 : cell) ) (FLOWS-INTO-CELL ?c2 ?c)) 1) ));
    (forall ( (?c : cell) ) (=> (~ (PERIMETER-EXIT-CELL ?c)) (== (sum ( (?c2 : cell) ) (FLOWS-INTO-CELL ?c ?c2)) 1) ));
    (forall ( (?i : intersection) ) (>= (sum ( (?c : cell) ) (| (FLOWS-INTO-INTERSECTION-NS ?c ?i) (FLOWS-INTO-INTERSECTION-EW ?c ?i) )) 1));
  };
}

non-fluents traffic_2lanes_2intersections_pomdp {
  domain = traffic_binary_ctm_pomdp;
  objects {
    intersection : {ia2a4, ia2a8};
    cell : {ca2a1, ca2a2, ca2a3, ca2a5, ca2a6, ca2a7, ca2a9, ca2a10, ca2a11, ca3a11, ca3a10, ca3a9, ca3a7, ca3a6, ca3a5, ca3a3, ca3a2, ca3a1, ca4a4, ca5a4, ca1a4, ca0a4, ca4a8, ca5a8, ca1a8, ca0a8};
  };
  non-fluents {
    PERIMETER-INPUT-CELL(ca2a1);
    PERIMETER-INPUT-CELL(ca3a11);
    PERIMETER-INPUT-CELL(ca5a4);
    PERIMETER-INPUT-CELL(ca5a8);
    PERIMETER-INPUT-RATE(ca2a1) = 0.8;
    PERIMETER-INPUT-RATE(ca3a11) = 0.3;
    PERIMETER-INPUT-RATE(ca5a4) = 0.3;
    PERIMETER-INPUT-RATE(ca5a8) = 0.3;
    PERIMETER-EXIT-CELL(ca2a11);
    PERIMETER-EXIT-CELL(ca3a1);
    PERIMETER-EXIT-CELL(ca0a4);
    PERIMETER-EXIT-CELL(ca0a8);
    FLOWS-INTO-INTERSECTION-EW(ca2a3, ia2a4);
    FLOWS-INTO-INTERSECTION-EW(ca3a5, ia2a4);
    FLOWS-INTO-INTERSECTION-EW(ca2a7, ia2a8);
    FLOWS-INTO-INTERSECTION-EW(ca3a9, ia2a8);
    FLOWS-INTO-INTERSECTION-NS(ca4a4, ia2a4);
    FLOWS-INTO-INTERSECTION-NS(ca4a8, ia2a8);
    FLOWS-INTO-CELL(ca5a4, ca4a4);
    FLOWS-INTO-CELL(ca4a4, ca1a4);
    FLOWS-INTO-CELL(ca1a4, ca0a4);
    FLOWS-INTO-CELL(ca5a8, ca4a8);
    FLOWS-INTO-CELL(ca4a8, ca1a8);
    FLOWS-INTO-CELL(ca1a8, ca0a8);
    FLOWS-INTO-CELL(ca2a1, ca2a2);
    FLOWS-INTO-CELL(ca2a2, ca2a3);
    FLOWS-INTO-CELL(ca2a3, ca2a5);
    FLOWS-INTO-CELL(ca2a5, ca2a6);
    FLOWS-INTO-CELL(ca2a6, ca2a7);
    FLOWS-INTO-CELL(ca2a7, ca2a9);
    FLOWS-INTO-CELL(ca2a9, ca2a10);
    FLOWS-INTO-CELL(ca2a10, ca2a11);
    FLOWS-INTO-CELL(ca3a11, ca3a10);
    FLOWS-INTO-CELL(ca3a10, ca3a9);
    FLOWS-INTO-CELL(ca3a9, ca3a7);
    FLOWS-INTO-CELL(ca3a7, ca3a6);
    FLOWS-INTO-CELL(ca3a6, ca3a5);
    FLOWS-INTO-CELL(ca3a5, ca3a3);
    FLOWS-INTO-CELL(ca3a3, ca3a2);
    FLOWS-INTO-CELL(ca3a2, ca3a1);
  };
}

instance trp1 {
  domain = traffic_binary_ctm_pomdp;
  non-fluents = traffic_2lanes_2intersections_pomdp;
  init-state {
  };
  max-nondef-actions = 2;
  horizon = 100;
  discount = 1.0;
}

