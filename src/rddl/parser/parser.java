
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jan 13 23:01:32 EST 2014
//----------------------------------------------------

package rddl.parser;

import rddl.RDDL;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Mon Jan 13 23:01:32 EST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\343\000\002\002\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\010\000\002\004\007\000" +
    "\002\010\010\000\002\010\007\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\046\007\000\002\011" +
    "\007\000\002\013\003\000\002\013\004\000\002\022\006" +
    "\000\002\022\006\000\002\022\010\000\002\022\013\000" +
    "\002\022\015\000\002\022\010\000\002\020\005\000\002" +
    "\020\007\000\002\051\003\000\002\051\005\000\002\012" +
    "\003\000\002\012\005\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\004\000" +
    "\002\052\003\000\002\052\005\000\002\052\007\000\002" +
    "\052\007\000\002\014\005\000\002\014\003\000\002\015" +
    "\005\000\002\015\007\000\002\053\003\000\002\053\003" +
    "\000\002\057\003\000\002\057\004\000\002\057\003\000" +
    "\002\057\003\000\002\054\003\000\002\054\004\000\002" +
    "\055\003\000\002\055\003\000\002\056\005\000\002\056" +
    "\010\000\002\016\003\000\002\016\006\000\002\017\003" +
    "\000\002\017\005\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\023\007\000\002" +
    "\024\003\000\002\024\004\000\002\025\016\000\002\025" +
    "\016\000\002\025\016\000\002\025\016\000\002\025\012" +
    "\000\002\025\016\000\002\026\007\000\002\060\003\000" +
    "\002\060\003\000\002\027\003\000\002\027\004\000\002" +
    "\031\006\000\002\032\006\000\002\033\007\000\002\033" +
    "\006\000\002\034\003\000\002\034\004\000\002\035\004" +
    "\000\002\036\007\000\002\036\006\000\002\037\003\000" +
    "\002\037\004\000\002\040\004\000\002\041\007\000\002" +
    "\041\006\000\002\042\003\000\002\042\004\000\002\043" +
    "\004\000\002\045\003\000\002\045\004\000\002\050\010" +
    "\000\002\063\003\000\002\063\004\000\002\064\007\000" +
    "\002\064\004\000\002\064\010\000\002\064\005\000\002" +
    "\064\011\000\002\064\006\000\002\044\003\000\002\044" +
    "\005\000\002\044\004\000\002\044\006\000\002\065\003" +
    "\000\002\065\005\000\002\066\003\000\002\066\004\000" +
    "\002\066\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\004\000\002\061\006\000\002\061" +
    "\007\000\002\061\003\000\002\061\004\000\002\061\005" +
    "\000\002\071\003\000\002\071\005\000\002\071\005\000" +
    "\002\071\003\000\002\071\004\000\002\047\004\000\002" +
    "\047\005\000\002\067\003\000\002\067\005\000\002\030" +
    "\006\000\002\030\007\000\002\072\003\000\002\072\005" +
    "\000\002\073\005\000\002\074\005\000\002\074\005\000" +
    "\002\074\007\000\002\077\003\000\002\077\005\000\002" +
    "\075\003\000\002\075\005\000\002\076\006\000\002\076" +
    "\005\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\004\000\002\062\004\000\002\062\005\000" +
    "\002\062\005\000\002\062\006\000\002\062\003\000\002" +
    "\062\003\000\002\062\005\000\002\062\005\000\002\062" +
    "\005\000\002\062\005\000\002\062\005\000\002\062\005" +
    "\000\002\062\004\000\002\062\005\000\002\062\005\000" +
    "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
    "\062\010\000\002\062\010\000\002\062\003\000\002\062" +
    "\003\000\002\062\004\000\002\062\004\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\010\000\002\062\010\000\002\062\010\000\002" +
    "\062\010\000\002\062\012\000\002\062\011\000\002\062" +
    "\006\000\002\062\006\000\002\062\006\000\002\062\010" +
    "\000\002\062\010\000\002\062\006\000\002\062\010\000" +
    "\002\062\012\000\002\062\010\000\002\062\006\000\002" +
    "\062\010\000\002\062\010\000\002\007\024\000\002\007" +
    "\015\000\002\006\042\000\002\006\036\000\002\006\035" +
    "\000\002\006\031\000\002\006\035\000\002\006\031\000" +
    "\002\006\030\000\002\006\024\000\002\006\036\000\002" +
    "\006\032\000\002\006\031\000\002\006\025\000\002\006" +
    "\031\000\002\006\025\000\002\006\024\000\002\006\020" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02e8\000\010\004\007\005\011\030\005\001\002\000" +
    "\012\002\ufffd\004\007\005\011\030\005\001\002\000\004" +
    "\130\u02d5\001\002\000\012\002\ufffb\004\007\005\011\030" +
    "\005\001\002\000\004\130\u0207\001\002\000\004\002\u0206" +
    "\001\002\000\004\130\014\001\002\000\012\002\ufffc\004" +
    "\007\005\011\030\005\001\002\000\004\002\uffff\001\002" +
    "\000\004\013\015\001\002\000\004\004\016\001\002\000" +
    "\004\120\017\001\002\000\004\130\020\001\002\000\004" +
    "\102\021\001\002\000\014\006\026\010\024\011\027\025" +
    "\022\030\025\001\002\000\004\120\u01fc\001\002\000\004" +
    "\102\u01f6\001\002\000\004\013\u01c9\001\002\000\004\120" +
    "\u0160\001\002\000\004\120\162\001\002\000\004\013\030" +
    "\001\002\000\006\052\031\130\033\001\002\000\004\130" +
    "\154\001\002\000\012\014\uff93\052\031\102\uff93\130\033" +
    "\001\002\000\010\102\063\103\065\120\064\001\002\000" +
    "\004\014\035\001\002\000\004\102\036\001\002\000\006" +
    "\006\026\025\037\001\002\000\004\120\047\001\002\000" +
    "\004\102\041\001\002\000\004\007\042\001\002\000\004" +
    "\120\043\001\002\000\004\127\044\001\002\000\004\102" +
    "\045\001\002\000\004\014\046\001\002\000\012\002\uff23" +
    "\004\uff23\005\uff23\030\uff23\001\002\000\006\024\051\126" +
    "\050\001\002\000\004\102\uffc1\001\002\000\004\102\uffc0" +
    "\001\002\000\004\102\053\001\002\000\004\006\026\001" +
    "\002\000\004\102\055\001\002\000\004\007\056\001\002" +
    "\000\004\120\057\001\002\000\004\127\060\001\002\000" +
    "\004\102\061\001\002\000\004\014\062\001\002\000\012" +
    "\002\uff2b\004\uff2b\005\uff2b\030\uff2b\001\002\000\012\014" +
    "\uff90\052\uff90\102\uff90\130\uff90\001\002\000\034\023\105" +
    "\024\112\045\102\066\101\103\120\106\116\112\115\122" +
    "\111\123\114\126\104\127\113\130\103\141\107\001\002" +
    "\000\010\045\072\130\070\141\071\001\002\000\004\104" +
    "\076\001\002\000\006\104\uff87\105\074\001\002\000\010" +
    "\104\uff85\105\uff85\107\uff85\001\002\000\010\104\uff83\105" +
    "\uff83\107\uff83\001\002\000\004\130\073\001\002\000\010" +
    "\104\uff84\105\uff84\107\uff84\001\002\000\010\045\072\130" +
    "\070\141\071\001\002\000\004\104\uff86\001\002\000\006" +
    "\102\077\120\100\001\002\000\012\014\uff91\052\uff91\102" +
    "\uff91\130\uff91\001\002\000\034\023\105\024\112\045\102" +
    "\066\101\103\120\106\116\112\115\122\111\123\114\126" +
    "\104\127\113\130\103\141\107\001\002\000\006\126\147" +
    "\127\150\001\002\000\004\130\146\001\002\000\012\014" +
    "\uffd3\102\uffd3\105\uffd3\114\uffd3\001\002\000\012\014\uffc3" +
    "\102\uffc3\105\uffc3\114\uffc3\001\002\000\012\014\uffc4\102" +
    "\uffc4\105\uffc4\114\uffc4\001\002\000\012\014\uffd4\102\uffd4" +
    "\105\uffd4\114\uffd4\001\002\000\012\014\uffd1\102\uffd1\105" +
    "\uffd1\114\uffd1\001\002\000\012\014\uffd5\102\uffd5\105\uffd5" +
    "\114\uffd5\001\002\000\012\014\uffc9\102\uffc9\105\uffc9\114" +
    "\uffc9\001\002\000\012\014\uffc5\102\uffc5\105\uffc5\114\uffc5" +
    "\001\002\000\012\014\uffc7\102\uffc7\105\uffc7\114\uffc7\001" +
    "\002\000\012\014\uffc8\102\uffc8\105\uffc8\114\uffc8\001\002" +
    "\000\012\045\072\110\126\130\070\141\071\001\002\000" +
    "\004\112\140\001\002\000\004\102\137\001\002\000\004" +
    "\112\122\001\002\000\012\014\uffd6\102\uffd6\105\uffd6\114" +
    "\uffd6\001\002\000\012\045\072\110\126\130\070\141\071" +
    "\001\002\000\004\114\uffcc\001\002\000\004\107\133\001" +
    "\002\000\004\114\131\001\002\000\004\107\127\001\002" +
    "\000\034\023\105\024\112\045\102\066\101\103\120\106" +
    "\116\112\115\122\111\123\114\126\104\127\113\130\103" +
    "\141\107\001\002\000\004\114\uffcd\001\002\000\004\104" +
    "\132\001\002\000\012\014\uffcf\102\uffcf\105\uffcf\114\uffcf" +
    "\001\002\000\034\023\105\024\112\045\102\066\101\103" +
    "\120\106\116\112\115\122\111\123\114\126\104\127\113" +
    "\130\103\141\107\001\002\000\006\105\135\114\uffcb\001" +
    "\002\000\010\045\072\130\070\141\071\001\002\000\004" +
    "\114\uffca\001\002\000\012\014\uff8d\052\uff8d\102\uff8d\130" +
    "\uff8d\001\002\000\012\045\072\110\126\130\070\141\071" +
    "\001\002\000\004\114\142\001\002\000\004\111\143\001" +
    "\002\000\012\014\uffce\102\uffce\105\uffce\114\uffce\001\002" +
    "\000\004\114\145\001\002\000\012\014\uffd0\102\uffd0\105" +
    "\uffd0\114\uffd0\001\002\000\012\014\uffd2\102\uffd2\105\uffd2" +
    "\114\uffd2\001\002\000\012\014\uffc2\102\uffc2\105\uffc2\114" +
    "\uffc2\001\002\000\012\014\uffc6\102\uffc6\105\uffc6\114\uffc6" +
    "\001\002\000\004\102\152\001\002\000\012\014\uff8c\052" +
    "\uff8c\102\uff8c\130\uff8c\001\002\000\006\014\uff92\102\uff92" +
    "\001\002\000\006\102\155\103\156\001\002\000\012\014" +
    "\uff8e\052\uff8e\102\uff8e\130\uff8e\001\002\000\010\045\072" +
    "\130\070\141\071\001\002\000\004\104\160\001\002\000" +
    "\004\102\161\001\002\000\012\014\uff8f\052\uff8f\102\uff8f" +
    "\130\uff8f\001\002\000\010\024\051\071\163\126\050\001" +
    "\002\000\004\103\165\001\002\000\004\102\uffbf\001\002" +
    "\000\106\037\213\040\225\041\214\042\222\044\166\045" +
    "\211\046\216\052\177\053\223\054\227\055\206\056\226" +
    "\057\212\060\200\061\224\062\167\063\202\066\176\067" +
    "\203\073\220\076\205\077\207\100\174\101\215\103\173" +
    "\106\221\112\175\122\210\123\230\126\172\127\171\130" +
    "\217\131\231\141\201\001\002\000\004\016\u015b\001\002" +
    "\000\004\103\u0158\001\002\000\042\047\235\050\253\051" +
    "\252\063\243\064\250\065\245\066\234\104\u0157\112\246" +
    "\113\237\114\240\115\241\116\244\117\236\121\251\124" +
    "\242\001\002\000\054\014\uff49\047\uff49\050\uff49\051\uff49" +
    "\063\uff49\064\uff49\065\uff49\066\uff49\072\uff49\102\uff49\104" +
    "\uff49\105\uff49\111\uff49\112\uff49\113\uff49\114\uff49\115\uff49" +
    "\116\uff49\117\uff49\121\uff49\124\uff49\001\002\000\054\014" +
    "\uff4a\047\uff4a\050\uff4a\051\uff4a\063\uff4a\064\uff4a\065\uff4a" +
    "\066\uff4a\072\uff4a\102\uff4a\104\uff4a\105\uff4a\111\uff4a\112" +
    "\uff4a\113\uff4a\114\uff4a\115\uff4a\116\uff4a\117\uff4a\121\uff4a" +
    "\124\uff4a\001\002\000\106\037\213\040\225\041\214\042" +
    "\222\044\166\045\211\046\216\052\177\053\223\054\227" +
    "\055\206\056\226\057\212\060\200\061\224\062\167\063" +
    "\202\066\176\067\203\073\220\076\205\077\207\100\174" +
    "\101\215\103\173\106\221\112\175\122\210\123\230\126" +
    "\172\127\171\130\217\131\231\141\201\001\002\000\004" +
    "\103\u014e\001\002\000\010\045\072\130\070\141\071\001" +
    "\002\000\106\037\213\040\225\041\214\042\222\044\166" +
    "\045\211\046\216\052\177\053\223\054\227\055\206\056" +
    "\226\057\212\060\200\061\224\062\167\063\202\066\176" +
    "\067\203\073\220\076\205\077\207\100\174\101\215\103" +
    "\173\106\221\112\175\122\210\123\230\126\172\127\171" +
    "\130\217\131\231\141\201\001\002\000\106\037\213\040" +
    "\225\041\214\042\222\044\166\045\211\046\216\052\177" +
    "\053\223\054\227\055\206\056\226\057\212\060\200\061" +
    "\224\062\167\063\202\066\176\067\203\073\220\076\205" +
    "\077\207\100\174\101\215\103\173\106\221\112\175\122" +
    "\210\123\230\126\172\127\171\130\217\131\231\141\201" +
    "\001\002\000\004\103\u0140\001\002\000\054\014\uff60\047" +
    "\uff60\050\uff60\051\uff60\063\uff60\064\uff60\065\uff60\066\uff60" +
    "\072\uff60\102\uff60\104\uff60\105\uff60\111\uff60\112\uff60\113" +
    "\uff60\114\uff60\115\uff60\116\uff60\117\uff60\121\uff60\124\uff60" +
    "\001\002\000\106\037\213\040\225\041\214\042\222\044" +
    "\166\045\211\046\216\052\177\053\223\054\227\055\206" +
    "\056\226\057\212\060\200\061\224\062\167\063\202\066" +
    "\176\067\203\073\220\076\205\077\207\100\174\101\215" +
    "\103\173\106\221\112\175\122\210\123\230\126\172\127" +
    "\171\130\217\131\231\141\201\001\002\000\004\103\u0138" +
    "\001\002\000\054\014\uff61\047\uff61\050\uff61\051\uff61\063" +
    "\uff61\064\uff61\065\uff61\066\uff61\072\uff61\102\uff61\104\uff61" +
    "\105\uff61\111\uff61\112\uff61\113\uff61\114\uff61\115\uff61\116" +
    "\uff61\117\uff61\121\uff61\124\uff61\001\002\000\004\103\u0133" +
    "\001\002\000\004\103\u012e\001\002\000\004\103\u0129\001" +
    "\002\000\054\014\uff5a\047\uff5a\050\uff5a\051\uff5a\063\uff5a" +
    "\064\uff5a\065\uff5a\066\uff5a\072\uff5a\102\uff5a\104\uff5a\105" +
    "\uff5a\111\uff5a\112\uff5a\113\uff5a\114\uff5a\115\uff5a\116\uff5a" +
    "\117\uff5a\121\uff5a\124\uff5a\001\002\000\004\130\u0128\001" +
    "\002\000\004\103\u011d\001\002\000\004\016\u0118\001\002" +
    "\000\004\016\u0113\001\002\000\004\103\u010e\001\002\000" +
    "\004\016\u0109\001\002\000\062\014\uff7c\047\uff7c\050\uff7c" +
    "\051\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\072\uff7c\074" +
    "\356\102\uff7c\103\355\104\uff7c\105\uff7c\106\u0103\111\uff7c" +
    "\112\uff7c\113\uff7c\114\uff7c\115\uff7c\116\uff7c\117\uff7c\121" +
    "\uff7c\124\uff7c\001\002\000\004\103\326\001\002\000\106" +
    "\037\213\040\225\041\214\042\222\044\166\045\211\046" +
    "\216\052\177\053\223\054\227\055\206\056\226\057\212" +
    "\060\200\061\224\062\167\063\202\066\176\067\203\073" +
    "\220\076\205\077\207\100\174\101\215\103\173\106\221" +
    "\112\175\122\210\123\230\126\172\127\171\130\217\131" +
    "\231\141\201\001\002\000\004\016\317\001\002\000\004" +
    "\103\314\001\002\000\004\103\311\001\002\000\004\016" +
    "\276\001\002\000\004\103\273\001\002\000\004\103\232" +
    "\001\002\000\054\014\uff59\047\uff59\050\uff59\051\uff59\063" +
    "\uff59\064\uff59\065\uff59\066\uff59\072\uff59\102\uff59\104\uff59" +
    "\105\uff59\111\uff59\112\uff59\113\uff59\114\uff59\115\uff59\116" +
    "\uff59\117\uff59\121\uff59\124\uff59\001\002\000\054\014\uff62" +
    "\047\uff62\050\uff62\051\uff62\063\uff62\064\uff62\065\uff62\066" +
    "\uff62\072\uff62\102\uff62\104\uff62\105\uff62\111\uff62\112\uff62" +
    "\113\uff62\114\uff62\115\uff62\116\uff62\117\uff62\121\uff62\124" +
    "\uff62\001\002\000\106\037\213\040\225\041\214\042\222" +
    "\044\166\045\211\046\216\052\177\053\223\054\227\055" +
    "\206\056\226\057\212\060\200\061\224\062\167\063\202" +
    "\066\176\067\203\073\220\076\205\077\207\100\174\101" +
    "\215\103\173\106\221\112\175\122\210\123\230\126\172" +
    "\127\171\130\217\131\231\141\201\001\002\000\042\047" +
    "\235\050\253\051\252\063\243\064\250\065\245\066\234" +
    "\104\247\112\246\113\237\114\240\115\241\116\244\117" +
    "\236\121\251\124\242\001\002\000\106\037\213\040\225" +
    "\041\214\042\222\044\166\045\211\046\216\052\177\053" +
    "\223\054\227\055\206\056\226\057\212\060\200\061\224" +
    "\062\167\063\202\066\176\067\203\073\220\076\205\077" +
    "\207\100\174\101\215\103\173\106\221\112\175\122\210" +
    "\123\230\126\172\127\171\130\217\131\231\141\201\001" +
    "\002\000\106\037\213\040\225\041\214\042\222\044\166" +
    "\045\211\046\216\052\177\053\223\054\227\055\206\056" +
    "\226\057\212\060\200\061\224\062\167\063\202\066\176" +
    "\067\203\073\220\076\205\077\207\100\174\101\215\103" +
    "\173\106\221\112\175\122\210\123\230\126\172\127\171" +
    "\130\217\131\231\141\201\001\002\000\106\037\213\040" +
    "\225\041\214\042\222\044\166\045\211\046\216\052\177" +
    "\053\223\054\227\055\206\056\226\057\212\060\200\061" +
    "\224\062\167\063\202\066\176\067\203\073\220\076\205" +
    "\077\207\100\174\101\215\103\173\106\221\112\175\122" +
    "\210\123\230\126\172\127\171\130\217\131\231\141\201" +
    "\001\002\000\106\037\213\040\225\041\214\042\222\044" +
    "\166\045\211\046\216\052\177\053\223\054\227\055\206" +
    "\056\226\057\212\060\200\061\224\062\167\063\202\066" +
    "\176\067\203\073\220\076\205\077\207\100\174\101\215" +
    "\103\173\106\221\112\175\122\210\123\230\126\172\127" +
    "\171\130\217\131\231\141\201\001\002\000\106\037\213" +
    "\040\225\041\214\042\222\044\166\045\211\046\216\052" +
    "\177\053\223\054\227\055\206\056\226\057\212\060\200" +
    "\061\224\062\167\063\202\066\176\067\203\073\220\076" +
    "\205\077\207\100\174\101\215\103\173\106\221\112\175" +
    "\122\210\123\230\126\172\127\171\130\217\131\231\141" +
    "\201\001\002\000\106\037\213\040\225\041\214\042\222" +
    "\044\166\045\211\046\216\052\177\053\223\054\227\055" +
    "\206\056\226\057\212\060\200\061\224\062\167\063\202" +
    "\066\176\067\203\073\220\076\205\077\207\100\174\101" +
    "\215\103\173\106\221\112\175\122\210\123\230\126\172" +
    "\127\171\130\217\131\231\141\201\001\002\000\106\037" +
    "\213\040\225\041\214\042\222\044\166\045\211\046\216" +
    "\052\177\053\223\054\227\055\206\056\226\057\212\060" +
    "\200\061\224\062\167\063\202\066\176\067\203\073\220" +
    "\076\205\077\207\100\174\101\215\103\173\106\221\112" +
    "\175\122\210\123\230\126\172\127\171\130\217\131\231" +
    "\141\201\001\002\000\106\037\213\040\225\041\214\042" +
    "\222\044\166\045\211\046\216\052\177\053\223\054\227" +
    "\055\206\056\226\057\212\060\200\061\224\062\167\063" +
    "\202\066\176\067\203\073\220\076\205\077\207\100\174" +
    "\101\215\103\173\106\221\112\175\122\210\123\230\126" +
    "\172\127\171\130\217\131\231\141\201\001\002\000\106" +
    "\037\213\040\225\041\214\042\222\044\166\045\211\046" +
    "\216\052\177\053\223\054\227\055\206\056\226\057\212" +
    "\060\200\061\224\062\167\063\202\066\176\067\203\073" +
    "\220\076\205\077\207\100\174\101\215\103\173\106\221" +
    "\112\175\122\210\123\230\126\172\127\171\130\217\131" +
    "\231\141\201\001\002\000\106\037\213\040\225\041\214" +
    "\042\222\044\166\045\211\046\216\052\177\053\223\054" +
    "\227\055\206\056\226\057\212\060\200\061\224\062\167" +
    "\063\202\066\176\067\203\073\220\076\205\077\207\100" +
    "\174\101\215\103\173\106\221\112\175\122\210\123\230" +
    "\126\172\127\171\130\217\131\231\141\201\001\002\000" +
    "\106\037\213\040\225\041\214\042\222\044\166\045\211" +
    "\046\216\052\177\053\223\054\227\055\206\056\226\057" +
    "\212\060\200\061\224\062\167\063\202\066\176\067\203" +
    "\073\220\076\205\077\207\100\174\101\215\103\173\106" +
    "\221\112\175\122\210\123\230\126\172\127\171\130\217" +
    "\131\231\141\201\001\002\000\054\014\uff3b\047\uff3b\050" +
    "\uff3b\051\uff3b\063\uff3b\064\uff3b\065\uff3b\066\uff3b\072\uff3b" +
    "\102\uff3b\104\uff3b\105\uff3b\111\uff3b\112\uff3b\113\uff3b\114" +
    "\uff3b\115\uff3b\116\uff3b\117\uff3b\121\uff3b\124\uff3b\001\002" +
    "\000\106\037\213\040\225\041\214\042\222\044\166\045" +
    "\211\046\216\052\177\053\223\054\227\055\206\056\226" +
    "\057\212\060\200\061\224\062\167\063\202\066\176\067" +
    "\203\073\220\076\205\077\207\100\174\101\215\103\173" +
    "\106\221\112\175\122\210\123\230\126\172\127\171\130" +
    "\217\131\231\141\201\001\002\000\106\037\213\040\225" +
    "\041\214\042\222\044\166\045\211\046\216\052\177\053" +
    "\223\054\227\055\206\056\226\057\212\060\200\061\224" +
    "\062\167\063\202\066\176\067\203\073\220\076\205\077" +
    "\207\100\174\101\215\103\173\106\221\112\175\122\210" +
    "\123\230\126\172\127\171\130\217\131\231\141\201\001" +
    "\002\000\106\037\213\040\225\041\214\042\222\044\166" +
    "\045\211\046\216\052\177\053\223\054\227\055\206\056" +
    "\226\057\212\060\200\061\224\062\167\063\202\066\176" +
    "\067\203\073\220\076\205\077\207\100\174\101\215\103" +
    "\173\106\221\112\175\122\210\123\230\126\172\127\171" +
    "\130\217\131\231\141\201\001\002\000\106\037\213\040" +
    "\225\041\214\042\222\044\166\045\211\046\216\052\177" +
    "\053\223\054\227\055\206\056\226\057\212\060\200\061" +
    "\224\062\167\063\202\066\176\067\203\073\220\076\205" +
    "\077\207\100\174\101\215\103\173\106\221\112\175\122" +
    "\210\123\230\126\172\127\171\130\217\131\231\141\201" +
    "\001\002\000\054\014\uff50\047\uff50\050\uff50\051\uff50\063" +
    "\243\064\250\065\245\066\234\072\uff50\102\uff50\104\uff50" +
    "\105\uff50\111\uff50\112\246\113\237\114\240\115\241\116" +
    "\uff50\117\uff50\121\251\124\242\001\002\000\054\014\uff4f" +
    "\047\235\050\253\051\uff4f\063\243\064\250\065\245\066" +
    "\234\072\uff4f\102\uff4f\104\uff4f\105\uff4f\111\uff4f\112\246" +
    "\113\237\114\240\115\241\116\uff4f\117\uff4f\121\251\124" +
    "\242\001\002\000\054\014\uff58\047\uff58\050\uff58\051\uff58" +
    "\063\243\064\250\065\245\066\234\072\uff58\102\uff58\104" +
    "\uff58\105\uff58\111\uff58\112\uff58\113\uff58\114\uff58\115\uff58" +
    "\116\uff58\117\uff58\121\uff58\124\uff58\001\002\000\054\014" +
    "\uff46\047\uff46\050\uff46\051\uff46\063\uff46\064\uff46\065\uff46" +
    "\066\uff46\072\uff46\102\uff46\104\uff46\105\uff46\111\uff46\112" +
    "\uff46\113\uff46\114\uff46\115\uff46\116\uff46\117\uff46\121\uff46" +
    "\124\uff46\001\002\000\054\014\uff54\047\uff54\050\uff54\051" +
    "\uff54\063\243\064\250\065\245\066\234\072\uff54\102\uff54" +
    "\104\uff54\105\uff54\111\uff54\112\uff54\113\uff54\114\uff54\115" +
    "\uff54\116\uff54\117\uff54\121\uff54\124\uff54\001\002\000\054" +
    "\014\uff45\047\uff45\050\uff45\051\uff45\063\uff45\064\uff45\065" +
    "\uff45\066\uff45\072\uff45\102\uff45\104\uff45\105\uff45\111\uff45" +
    "\112\uff45\113\uff45\114\uff45\115\uff45\116\uff45\117\uff45\121" +
    "\uff45\124\uff45\001\002\000\054\014\uff4e\047\235\050\253" +
    "\051\252\063\243\064\250\065\245\066\234\072\uff4e\102" +
    "\uff4e\104\uff4e\105\uff4e\111\uff4e\112\246\113\237\114\240" +
    "\115\241\116\uff4e\117\uff4e\121\251\124\242\001\002\000" +
    "\054\014\uff44\047\uff44\050\uff44\051\uff44\063\uff44\064\250" +
    "\065\245\066\uff44\072\uff44\102\uff44\104\uff44\105\uff44\111" +
    "\uff44\112\uff44\113\uff44\114\uff44\115\uff44\116\uff44\117\uff44" +
    "\121\uff44\124\uff44\001\002\000\054\014\uff57\047\uff57\050" +
    "\uff57\051\uff57\063\243\064\250\065\245\066\234\072\uff57" +
    "\102\uff57\104\uff57\105\uff57\111\uff57\112\uff57\113\uff57\114" +
    "\uff57\115\uff57\116\uff57\117\uff57\121\uff57\124\uff57\001\002" +
    "\000\054\014\uff55\047\uff55\050\uff55\051\uff55\063\243\064" +
    "\250\065\245\066\234\072\uff55\102\uff55\104\uff55\105\uff55" +
    "\111\uff55\112\uff55\113\uff55\114\uff55\115\uff55\116\uff55\117" +
    "\uff55\121\uff55\124\uff55\001\002\000\054\014\uff56\047\uff56" +
    "\050\uff56\051\uff56\063\243\064\250\065\245\066\234\072" +
    "\uff56\102\uff56\104\uff56\105\uff56\111\uff56\112\uff56\113\uff56" +
    "\114\uff56\115\uff56\116\uff56\117\uff56\121\uff56\124\uff56\001" +
    "\002\000\054\014\uff53\047\uff53\050\uff53\051\uff53\063\243" +
    "\064\250\065\245\066\234\072\uff53\102\uff53\104\uff53\105" +
    "\uff53\111\uff53\112\uff53\113\uff53\114\uff53\115\uff53\116\uff53" +
    "\117\uff53\121\uff53\124\uff53\001\002\000\054\014\uff4d\047" +
    "\235\050\253\051\252\063\243\064\250\065\245\066\234" +
    "\072\uff4d\102\uff4d\104\uff4d\105\uff4d\111\uff4d\112\246\113" +
    "\237\114\240\115\241\116\244\117\uff4d\121\251\124\242" +
    "\001\002\000\054\014\uff51\047\uff51\050\uff51\051\uff51\063" +
    "\243\064\250\065\245\066\234\072\uff51\102\uff51\104\uff51" +
    "\105\uff51\111\uff51\112\246\113\237\114\240\115\241\116" +
    "\uff51\117\uff51\121\251\124\242\001\002\000\054\014\uff43" +
    "\047\uff43\050\uff43\051\uff43\063\uff43\064\250\065\245\066" +
    "\uff43\072\uff43\102\uff43\104\uff43\105\uff43\111\uff43\112\uff43" +
    "\113\uff43\114\uff43\115\uff43\116\uff43\117\uff43\121\uff43\124" +
    "\uff43\001\002\000\106\037\213\040\225\041\214\042\222" +
    "\044\166\045\211\046\216\052\177\053\223\054\227\055" +
    "\206\056\226\057\212\060\200\061\224\062\167\063\202" +
    "\066\176\067\203\073\220\076\205\077\207\100\174\101" +
    "\215\103\173\106\221\112\175\122\210\123\230\126\172" +
    "\127\171\130\217\131\231\141\201\001\002\000\042\047" +
    "\235\050\253\051\252\063\243\064\250\065\245\066\234" +
    "\104\275\112\246\113\237\114\240\115\241\116\244\117" +
    "\236\121\251\124\242\001\002\000\054\014\uff3c\047\uff3c" +
    "\050\uff3c\051\uff3c\063\uff3c\064\uff3c\065\uff3c\066\uff3c\072" +
    "\uff3c\102\uff3c\104\uff3c\105\uff3c\111\uff3c\112\uff3c\113\uff3c" +
    "\114\uff3c\115\uff3c\116\uff3c\117\uff3c\121\uff3c\124\uff3c\001" +
    "\002\000\004\013\277\001\002\000\004\131\300\001\002" +
    "\000\004\107\307\001\002\000\004\014\305\001\002\000" +
    "\006\014\uff6e\105\303\001\002\000\004\131\300\001\002" +
    "\000\004\014\uff6d\001\002\000\106\037\213\040\225\041" +
    "\214\042\222\044\166\045\211\046\216\052\177\053\223" +
    "\054\227\055\206\056\226\057\212\060\200\061\224\062" +
    "\167\063\202\066\176\067\203\073\220\076\205\077\207" +
    "\100\174\101\215\103\173\106\221\112\175\122\210\123" +
    "\230\126\172\127\171\130\217\131\231\141\201\001\002" +
    "\000\054\014\uff41\047\235\050\253\051\252\063\243\064" +
    "\250\065\245\066\234\072\uff41\102\uff41\104\uff41\105\uff41" +
    "\111\uff41\112\246\113\237\114\240\115\241\116\244\117" +
    "\236\121\251\124\242\001\002\000\004\130\310\001\002" +
    "\000\006\014\uff6c\105\uff6c\001\002\000\106\037\213\040" +
    "\225\041\214\042\222\044\166\045\211\046\216\052\177" +
    "\053\223\054\227\055\206\056\226\057\212\060\200\061" +
    "\224\062\167\063\202\066\176\067\203\073\220\076\205" +
    "\077\207\100\174\101\215\103\173\106\221\112\175\122" +
    "\210\123\230\126\172\127\171\130\217\131\231\141\201" +
    "\001\002\000\042\047\235\050\253\051\252\063\243\064" +
    "\250\065\245\066\234\104\313\112\246\113\237\114\240" +
    "\115\241\116\244\117\236\121\251\124\242\001\002\000" +
    "\054\014\uff33\047\uff33\050\uff33\051\uff33\063\uff33\064\uff33" +
    "\065\uff33\066\uff33\072\uff33\102\uff33\104\uff33\105\uff33\111" +
    "\uff33\112\uff33\113\uff33\114\uff33\115\uff33\116\uff33\117\uff33" +
    "\121\uff33\124\uff33\001\002\000\106\037\213\040\225\041" +
    "\214\042\222\044\166\045\211\046\216\052\177\053\223" +
    "\054\227\055\206\056\226\057\212\060\200\061\224\062" +
    "\167\063\202\066\176\067\203\073\220\076\205\077\207" +
    "\100\174\101\215\103\173\106\221\112\175\122\210\123" +
    "\230\126\172\127\171\130\217\131\231\141\201\001\002" +
    "\000\042\047\235\050\253\051\252\063\243\064\250\065" +
    "\245\066\234\104\316\112\246\113\237\114\240\115\241" +
    "\116\244\117\236\121\251\124\242\001\002\000\054\014" +
    "\uff3a\047\uff3a\050\uff3a\051\uff3a\063\uff3a\064\uff3a\065\uff3a" +
    "\066\uff3a\072\uff3a\102\uff3a\104\uff3a\105\uff3a\111\uff3a\112" +
    "\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\121\uff3a" +
    "\124\uff3a\001\002\000\004\013\320\001\002\000\004\131" +
    "\300\001\002\000\004\014\322\001\002\000\106\037\213" +
    "\040\225\041\214\042\222\044\166\045\211\046\216\052" +
    "\177\053\223\054\227\055\206\056\226\057\212\060\200" +
    "\061\224\062\167\063\202\066\176\067\203\073\220\076" +
    "\205\077\207\100\174\101\215\103\173\106\221\112\175" +
    "\122\210\123\230\126\172\127\171\130\217\131\231\141" +
    "\201\001\002\000\054\014\uff3f\047\235\050\253\051\252" +
    "\063\243\064\250\065\245\066\234\072\uff3f\102\uff3f\104" +
    "\uff3f\105\uff3f\111\uff3f\112\246\113\237\114\240\115\241" +
    "\116\244\117\236\121\251\124\242\001\002\000\042\047" +
    "\235\050\253\051\252\063\243\064\250\065\245\066\234" +
    "\111\325\112\246\113\237\114\240\115\241\116\244\117" +
    "\236\121\251\124\242\001\002\000\054\014\uff5d\047\uff5d" +
    "\050\uff5d\051\uff5d\063\uff5d\064\uff5d\065\uff5d\066\uff5d\072" +
    "\uff5d\102\uff5d\104\uff5d\105\uff5d\111\uff5d\112\uff5d\113\uff5d" +
    "\114\uff5d\115\uff5d\116\uff5d\117\uff5d\121\uff5d\124\uff5d\001" +
    "\002\000\012\045\333\130\331\131\327\141\332\001\002" +
    "\000\010\104\uff82\105\uff82\107\uff82\001\002\000\010\104" +
    "\uff81\105\uff81\107\uff81\001\002\000\020\074\356\103\355" +
    "\104\uff7c\105\uff7c\107\uff7c\111\uff7c\120\uff7c\001\002\000" +
    "\010\104\uff80\105\uff80\107\uff80\001\002\000\004\130\353" +
    "\001\002\000\004\104\335\001\002\000\004\013\336\001" +
    "\002\000\006\031\342\036\337\001\002\000\004\107\351" +
    "\001\002\000\006\014\uff66\105\347\001\002\000\004\014" +
    "\346\001\002\000\012\045\333\130\331\131\327\141\332" +
    "\001\002\000\004\107\344\001\002\000\106\037\213\040" +
    "\225\041\214\042\222\044\166\045\211\046\216\052\177" +
    "\053\223\054\227\055\206\056\226\057\212\060\200\061" +
    "\224\062\167\063\202\066\176\067\203\073\220\076\205" +
    "\077\207\100\174\101\215\103\173\106\221\112\175\122" +
    "\210\123\230\126\172\127\171\130\217\131\231\141\201" +
    "\001\002\000\044\014\uff64\047\235\050\253\051\252\063" +
    "\243\064\250\065\245\066\234\105\uff64\112\246\113\237" +
    "\114\240\115\241\116\244\117\236\121\251\124\242\001" +
    "\002\000\054\014\uff3d\047\uff3d\050\uff3d\051\uff3d\063\uff3d" +
    "\064\uff3d\065\uff3d\066\uff3d\072\uff3d\102\uff3d\104\uff3d\105" +
    "\uff3d\111\uff3d\112\uff3d\113\uff3d\114\uff3d\115\uff3d\116\uff3d" +
    "\117\uff3d\121\uff3d\124\uff3d\001\002\000\006\031\342\036" +
    "\337\001\002\000\004\014\uff65\001\002\000\106\037\213" +
    "\040\225\041\214\042\222\044\166\045\211\046\216\052" +
    "\177\053\223\054\227\055\206\056\226\057\212\060\200" +
    "\061\224\062\167\063\202\066\176\067\203\073\220\076" +
    "\205\077\207\100\174\101\215\103\173\106\221\112\175" +
    "\122\210\123\230\126\172\127\171\130\217\131\231\141" +
    "\201\001\002\000\044\014\uff63\047\235\050\253\051\252" +
    "\063\243\064\250\065\245\066\234\105\uff63\112\246\113" +
    "\237\114\240\115\241\116\244\117\236\121\251\124\242" +
    "\001\002\000\010\104\uff7f\105\uff7f\107\uff7f\001\002\000" +
    "\060\014\uff7b\047\uff7b\050\uff7b\051\uff7b\063\uff7b\064\uff7b" +
    "\065\uff7b\066\uff7b\072\uff7b\102\uff7b\104\uff7b\105\uff7b\107" +
    "\uff7b\111\uff7b\112\uff7b\113\uff7b\114\uff7b\115\uff7b\116\uff7b" +
    "\117\uff7b\120\uff7b\121\uff7b\124\uff7b\001\002\000\012\045" +
    "\333\130\331\131\327\141\332\001\002\000\016\036\357" +
    "\045\365\103\364\106\362\131\360\141\363\001\002\000" +
    "\060\014\uff7a\047\uff7a\050\uff7a\051\uff7a\063\uff7a\064\uff7a" +
    "\065\uff7a\066\uff7a\072\uff7a\102\uff7a\104\uff7a\105\uff7a\107" +
    "\uff7a\111\uff7a\112\uff7a\113\uff7a\114\uff7a\115\uff7a\116\uff7a" +
    "\117\uff7a\120\uff7a\121\uff7a\124\uff7a\001\002\000\062\014" +
    "\uff79\047\uff79\050\uff79\051\uff79\063\uff79\064\uff79\065\uff79" +
    "\066\uff79\072\uff79\074\uff79\102\uff79\104\uff79\105\uff79\107" +
    "\uff79\111\uff79\112\uff79\113\uff79\114\uff79\115\uff79\116\uff79" +
    "\117\uff79\120\uff79\121\uff79\124\uff79\001\002\000\062\014" +
    "\uff74\047\uff74\050\uff74\051\uff74\063\uff74\064\uff74\065\uff74" +
    "\066\uff74\072\uff74\074\374\102\uff74\104\uff74\105\uff74\107" +
    "\uff74\111\uff74\112\uff74\113\uff74\114\uff74\115\uff74\116\uff74" +
    "\117\uff74\120\uff74\121\uff74\124\uff74\001\002\000\004\130" +
    "\331\001\002\000\062\014\uff76\047\uff76\050\uff76\051\uff76" +
    "\063\uff76\064\uff76\065\uff76\066\uff76\072\uff76\074\uff76\102" +
    "\uff76\104\uff76\105\uff76\107\uff76\111\uff76\112\uff76\113\uff76" +
    "\114\uff76\115\uff76\116\uff76\117\uff76\120\uff76\121\uff76\124" +
    "\uff76\001\002\000\004\130\331\001\002\000\004\130\366" +
    "\001\002\000\062\014\uff75\047\uff75\050\uff75\051\uff75\063" +
    "\uff75\064\uff75\065\uff75\066\uff75\072\uff75\074\uff75\102\uff75" +
    "\104\uff75\105\uff75\107\uff75\111\uff75\112\uff75\113\uff75\114" +
    "\uff75\115\uff75\116\uff75\117\uff75\120\uff75\121\uff75\124\uff75" +
    "\001\002\000\004\104\370\001\002\000\062\014\uff78\047" +
    "\uff78\050\uff78\051\uff78\063\uff78\064\uff78\065\uff78\066\uff78" +
    "\072\uff78\074\uff78\102\uff78\104\uff78\105\uff78\107\uff78\111" +
    "\uff78\112\uff78\113\uff78\114\uff78\115\uff78\116\uff78\117\uff78" +
    "\120\uff78\121\uff78\124\uff78\001\002\000\004\111\372\001" +
    "\002\000\062\014\uff77\047\uff77\050\uff77\051\uff77\063\uff77" +
    "\064\uff77\065\uff77\066\uff77\072\uff77\074\uff77\102\uff77\104" +
    "\uff77\105\uff77\107\uff77\111\uff77\112\uff77\113\uff77\114\uff77" +
    "\115\uff77\116\uff77\117\uff77\120\uff77\121\uff77\124\uff77\001" +
    "\002\000\060\014\uff73\047\uff73\050\uff73\051\uff73\063\uff73" +
    "\064\uff73\065\uff73\066\uff73\072\uff73\102\uff73\104\uff73\105" +
    "\uff73\107\uff73\111\uff73\112\uff73\113\uff73\114\uff73\115\uff73" +
    "\116\uff73\117\uff73\120\uff73\121\uff73\124\uff73\001\002\000" +
    "\014\045\365\103\364\106\362\131\360\141\363\001\002" +
    "\000\004\104\u0101\001\002\000\006\104\uff72\105\377\001" +
    "\002\000\012\045\333\130\331\131\327\141\332\001\002" +
    "\000\004\104\uff71\001\002\000\062\014\uff7e\047\uff7e\050" +
    "\uff7e\051\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\072\uff7e" +
    "\074\374\102\uff7e\104\uff7e\105\uff7e\107\uff7e\111\uff7e\112" +
    "\uff7e\113\uff7e\114\uff7e\115\uff7e\116\uff7e\117\uff7e\120\uff7e" +
    "\121\uff7e\124\uff7e\001\002\000\060\014\uff7d\047\uff7d\050" +
    "\uff7d\051\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\072\uff7d" +
    "\102\uff7d\104\uff7d\105\uff7d\107\uff7d\111\uff7d\112\uff7d\113" +
    "\uff7d\114\uff7d\115\uff7d\116\uff7d\117\uff7d\120\uff7d\121\uff7d" +
    "\124\uff7d\001\002\000\106\037\213\040\225\041\214\042" +
    "\222\044\166\045\211\046\216\052\177\053\223\054\227" +
    "\055\206\056\226\057\212\060\200\061\224\062\167\063" +
    "\202\066\176\067\203\073\220\076\205\077\207\100\174" +
    "\101\215\103\173\106\221\112\175\122\210\123\230\126" +
    "\172\127\171\130\217\131\231\141\201\001\002\000\044" +
    "\047\235\050\253\051\252\063\243\064\250\065\245\066" +
    "\234\105\u0107\111\uff68\112\246\113\237\114\240\115\241" +
    "\116\244\117\236\121\251\124\242\001\002\000\004\111" +
    "\u0106\001\002\000\054\014\uff5b\047\uff5b\050\uff5b\051\uff5b" +
    "\063\uff5b\064\uff5b\065\uff5b\066\uff5b\072\uff5b\102\uff5b\104" +
    "\uff5b\105\uff5b\111\uff5b\112\uff5b\113\uff5b\114\uff5b\115\uff5b" +
    "\116\uff5b\117\uff5b\121\uff5b\124\uff5b\001\002\000\106\037" +
    "\213\040\225\041\214\042\222\044\166\045\211\046\216" +
    "\052\177\053\223\054\227\055\206\056\226\057\212\060" +
    "\200\061\224\062\167\063\202\066\176\067\203\073\220" +
    "\076\205\077\207\100\174\101\215\103\173\106\221\112" +
    "\175\122\210\123\230\126\172\127\171\130\217\131\231" +
    "\141\201\001\002\000\004\111\uff67\001\002\000\004\013" +
    "\u010a\001\002\000\004\131\300\001\002\000\004\014\u010c" +
    "\001\002\000\106\037\213\040\225\041\214\042\222\044" +
    "\166\045\211\046\216\052\177\053\223\054\227\055\206" +
    "\056\226\057\212\060\200\061\224\062\167\063\202\066" +
    "\176\067\203\073\220\076\205\077\207\100\174\101\215" +
    "\103\173\106\221\112\175\122\210\123\230\126\172\127" +
    "\171\130\217\131\231\141\201\001\002\000\054\014\uff4b" +
    "\047\235\050\253\051\252\063\243\064\250\065\245\066" +
    "\234\072\uff4b\102\uff4b\104\uff4b\105\uff4b\111\uff4b\112\246" +
    "\113\237\114\240\115\241\116\244\117\236\121\251\124" +
    "\242\001\002\000\004\130\u010f\001\002\000\004\105\u0110" +
    "\001\002\000\106\037\213\040\225\041\214\042\222\044" +
    "\166\045\211\046\216\052\177\053\223\054\227\055\206" +
    "\056\226\057\212\060\200\061\224\062\167\063\202\066" +
    "\176\067\203\073\220\076\205\077\207\100\174\101\215" +
    "\103\173\106\221\112\175\122\210\123\230\126\172\127" +
    "\171\130\217\131\231\141\201\001\002\000\042\047\235" +
    "\050\253\051\252\063\243\064\250\065\245\066\234\104" +
    "\u0112\112\246\113\237\114\240\115\241\116\244\117\236" +
    "\121\251\124\242\001\002\000\054\014\uff34\047\uff34\050" +
    "\uff34\051\uff34\063\uff34\064\uff34\065\uff34\066\uff34\072\uff34" +
    "\102\uff34\104\uff34\105\uff34\111\uff34\112\uff34\113\uff34\114" +
    "\uff34\115\uff34\116\uff34\117\uff34\121\uff34\124\uff34\001\002" +
    "\000\004\013\u0114\001\002\000\004\131\300\001\002\000" +
    "\004\014\u0116\001\002\000\106\037\213\040\225\041\214" +
    "\042\222\044\166\045\211\046\216\052\177\053\223\054" +
    "\227\055\206\056\226\057\212\060\200\061\224\062\167" +
    "\063\202\066\176\067\203\073\220\076\205\077\207\100" +
    "\174\101\215\103\173\106\221\112\175\122\210\123\230" +
    "\126\172\127\171\130\217\131\231\141\201\001\002\000" +
    "\054\014\uff40\047\235\050\253\051\252\063\243\064\250" +
    "\065\245\066\234\072\uff40\102\uff40\104\uff40\105\uff40\111" +
    "\uff40\112\246\113\237\114\240\115\241\116\244\117\236" +
    "\121\251\124\242\001\002\000\004\013\u0119\001\002\000" +
    "\004\131\300\001\002\000\004\014\u011b\001\002\000\106" +
    "\037\213\040\225\041\214\042\222\044\166\045\211\046" +
    "\216\052\177\053\223\054\227\055\206\056\226\057\212" +
    "\060\200\061\224\062\167\063\202\066\176\067\203\073" +
    "\220\076\205\077\207\100\174\101\215\103\173\106\221" +
    "\112\175\122\210\123\230\126\172\127\171\130\217\131" +
    "\231\141\201\001\002\000\054\014\uff42\047\235\050\253" +
    "\051\252\063\243\064\250\065\245\066\234\072\uff42\102" +
    "\uff42\104\uff42\105\uff42\111\uff42\112\246\113\237\114\240" +
    "\115\241\116\244\117\236\121\251\124\242\001\002\000" +
    "\004\130\u011e\001\002\000\004\105\u011f\001\002\000\010" +
    "\045\072\130\070\141\071\001\002\000\004\107\u0123\001" +
    "\002\000\004\104\u0122\001\002\000\054\014\uff36\047\uff36" +
    "\050\uff36\051\uff36\063\uff36\064\uff36\065\uff36\066\uff36\072" +
    "\uff36\102\uff36\104\uff36\105\uff36\111\uff36\112\uff36\113\uff36" +
    "\114\uff36\115\uff36\116\uff36\117\uff36\121\uff36\124\uff36\001" +
    "\002\000\110\037\213\040\225\041\214\042\222\044\166" +
    "\045\211\046\216\052\177\053\223\054\227\055\206\056" +
    "\226\057\212\060\200\061\224\062\167\063\202\066\176" +
    "\067\203\073\220\075\u0124\076\205\077\207\100\174\101" +
    "\215\103\173\106\221\112\175\122\210\123\230\126\172" +
    "\127\171\130\217\131\231\141\201\001\002\000\004\104" +
    "\uff6a\001\002\000\044\047\235\050\253\051\252\063\243" +
    "\064\250\065\245\066\234\104\uff6b\105\u0126\112\246\113" +
    "\237\114\240\115\241\116\244\117\236\121\251\124\242" +
    "\001\002\000\010\045\072\130\070\141\071\001\002\000" +
    "\004\104\uff69\001\002\000\054\014\uff5f\047\uff5f\050\uff5f" +
    "\051\uff5f\063\uff5f\064\uff5f\065\uff5f\066\uff5f\072\uff5f\102" +
    "\uff5f\104\uff5f\105\uff5f\111\uff5f\112\uff5f\113\uff5f\114\uff5f" +
    "\115\uff5f\116\uff5f\117\uff5f\121\uff5f\124\uff5f\001\002\000" +
    "\106\037\213\040\225\041\214\042\222\044\166\045\211" +
    "\046\216\052\177\053\223\054\227\055\206\056\226\057" +
    "\212\060\200\061\224\062\167\063\202\066\176\067\203" +
    "\073\220\076\205\077\207\100\174\101\215\103\173\106" +
    "\221\112\175\122\210\123\230\126\172\127\171\130\217" +
    "\131\231\141\201\001\002\000\042\047\235\050\253\051" +
    "\252\063\243\064\250\065\245\066\234\105\u012b\112\246" +
    "\113\237\114\240\115\241\116\244\117\236\121\251\124" +
    "\242\001\002\000\106\037\213\040\225\041\214\042\222" +
    "\044\166\045\211\046\216\052\177\053\223\054\227\055" +
    "\206\056\226\057\212\060\200\061\224\062\167\063\202" +
    "\066\176\067\203\073\220\076\205\077\207\100\174\101" +
    "\215\103\173\106\221\112\175\122\210\123\230\126\172" +
    "\127\171\130\217\131\231\141\201\001\002\000\042\047" +
    "\235\050\253\051\252\063\243\064\250\065\245\066\234" +
    "\104\u012d\112\246\113\237\114\240\115\241\116\244\117" +
    "\236\121\251\124\242\001\002\000\054\014\uff31\047\uff31" +
    "\050\uff31\051\uff31\063\uff31\064\uff31\065\uff31\066\uff31\072" +
    "\uff31\102\uff31\104\uff31\105\uff31\111\uff31\112\uff31\113\uff31" +
    "\114\uff31\115\uff31\116\uff31\117\uff31\121\uff31\124\uff31\001" +
    "\002\000\106\037\213\040\225\041\214\042\222\044\166" +
    "\045\211\046\216\052\177\053\223\054\227\055\206\056" +
    "\226\057\212\060\200\061\224\062\167\063\202\066\176" +
    "\067\203\073\220\076\205\077\207\100\174\101\215\103" +
    "\173\106\221\112\175\122\210\123\230\126\172\127\171" +
    "\130\217\131\231\141\201\001\002\000\042\047\235\050" +
    "\253\051\252\063\243\064\250\065\245\066\234\105\u0130" +
    "\112\246\113\237\114\240\115\241\116\244\117\236\121" +
    "\251\124\242\001\002\000\106\037\213\040\225\041\214" +
    "\042\222\044\166\045\211\046\216\052\177\053\223\054" +
    "\227\055\206\056\226\057\212\060\200\061\224\062\167" +
    "\063\202\066\176\067\203\073\220\076\205\077\207\100" +
    "\174\101\215\103\173\106\221\112\175\122\210\123\230" +
    "\126\172\127\171\130\217\131\231\141\201\001\002\000" +
    "\042\047\235\050\253\051\252\063\243\064\250\065\245" +
    "\066\234\104\u0132\112\246\113\237\114\240\115\241\116" +
    "\244\117\236\121\251\124\242\001\002\000\054\014\uff39" +
    "\047\uff39\050\uff39\051\uff39\063\uff39\064\uff39\065\uff39\066" +
    "\uff39\072\uff39\102\uff39\104\uff39\105\uff39\111\uff39\112\uff39" +
    "\113\uff39\114\uff39\115\uff39\116\uff39\117\uff39\121\uff39\124" +
    "\uff39\001\002\000\106\037\213\040\225\041\214\042\222" +
    "\044\166\045\211\046\216\052\177\053\223\054\227\055" +
    "\206\056\226\057\212\060\200\061\224\062\167\063\202" +
    "\066\176\067\203\073\220\076\205\077\207\100\174\101" +
    "\215\103\173\106\221\112\175\122\210\123\230\126\172" +
    "\127\171\130\217\131\231\141\201\001\002\000\042\047" +
    "\235\050\253\051\252\063\243\064\250\065\245\066\234" +
    "\105\u0135\112\246\113\237\114\240\115\241\116\244\117" +
    "\236\121\251\124\242\001\002\000\106\037\213\040\225" +
    "\041\214\042\222\044\166\045\211\046\216\052\177\053" +
    "\223\054\227\055\206\056\226\057\212\060\200\061\224" +
    "\062\167\063\202\066\176\067\203\073\220\076\205\077" +
    "\207\100\174\101\215\103\173\106\221\112\175\122\210" +
    "\123\230\126\172\127\171\130\217\131\231\141\201\001" +
    "\002\000\042\047\235\050\253\051\252\063\243\064\250" +
    "\065\245\066\234\104\u0137\112\246\113\237\114\240\115" +
    "\241\116\244\117\236\121\251\124\242\001\002\000\054" +
    "\014\uff32\047\uff32\050\uff32\051\uff32\063\uff32\064\uff32\065" +
    "\uff32\066\uff32\072\uff32\102\uff32\104\uff32\105\uff32\111\uff32" +
    "\112\uff32\113\uff32\114\uff32\115\uff32\116\uff32\117\uff32\121" +
    "\uff32\124\uff32\001\002\000\106\037\213\040\225\041\214" +
    "\042\222\044\166\045\211\046\216\052\177\053\223\054" +
    "\227\055\206\056\226\057\212\060\200\061\224\062\167" +
    "\063\202\066\176\067\203\073\220\076\205\077\207\100" +
    "\174\101\215\103\173\106\221\112\175\122\210\123\230" +
    "\126\172\127\171\130\217\131\231\141\201\001\002\000" +
    "\042\047\235\050\253\051\252\063\243\064\250\065\245" +
    "\066\234\104\u013a\112\246\113\237\114\240\115\241\116" +
    "\244\117\236\121\251\124\242\001\002\000\004\070\u013b" +
    "\001\002\000\106\037\213\040\225\041\214\042\222\044" +
    "\166\045\211\046\216\052\177\053\223\054\227\055\206" +
    "\056\226\057\212\060\200\061\224\062\167\063\202\066" +
    "\176\067\203\073\220\076\205\077\207\100\174\101\215" +
    "\103\173\106\221\112\175\122\210\123\230\126\172\127" +
    "\171\130\217\131\231\141\201\001\002\000\042\047\235" +
    "\050\253\051\252\063\243\064\250\065\245\066\234\072" +
    "\u013d\112\246\113\237\114\240\115\241\116\244\117\236" +
    "\121\251\124\242\001\002\000\106\037\213\040\225\041" +
    "\214\042\222\044\166\045\211\046\216\052\177\053\223" +
    "\054\227\055\206\056\226\057\212\060\200\061\224\062" +
    "\167\063\202\066\176\067\203\073\220\076\205\077\207" +
    "\100\174\101\215\103\173\106\221\112\175\122\210\123" +
    "\230\126\172\127\171\130\217\131\231\141\201\001\002" +
    "\000\054\014\uff3e\047\235\050\253\051\252\063\243\064" +
    "\250\065\245\066\234\072\uff3e\102\uff3e\104\uff3e\105\uff3e" +
    "\111\uff3e\112\246\113\237\114\240\115\241\116\244\117" +
    "\236\121\251\124\242\001\002\000\054\014\uff48\047\uff48" +
    "\050\uff48\051\uff48\063\uff48\064\uff48\065\uff48\066\uff48\072" +
    "\uff48\102\uff48\104\uff48\105\uff48\111\uff48\112\uff48\113\uff48" +
    "\114\uff48\115\uff48\116\uff48\117\uff48\121\uff48\124\uff48\001" +
    "\002\000\106\037\213\040\225\041\214\042\222\044\166" +
    "\045\211\046\216\052\177\053\223\054\227\055\206\056" +
    "\226\057\212\060\200\061\224\062\167\063\202\066\176" +
    "\067\203\073\220\076\205\077\207\100\174\101\215\103" +
    "\173\106\221\112\175\122\210\123\230\126\172\127\171" +
    "\130\217\131\231\141\201\001\002\000\042\047\235\050" +
    "\253\051\252\063\243\064\250\065\245\066\234\105\u0142" +
    "\112\246\113\237\114\240\115\241\116\244\117\236\121" +
    "\251\124\242\001\002\000\106\037\213\040\225\041\214" +
    "\042\222\044\166\045\211\046\216\052\177\053\223\054" +
    "\227\055\206\056\226\057\212\060\200\061\224\062\167" +
    "\063\202\066\176\067\203\073\220\076\205\077\207\100" +
    "\174\101\215\103\173\106\221\112\175\122\210\123\230" +
    "\126\172\127\171\130\217\131\231\141\201\001\002\000" +
    "\042\047\235\050\253\051\252\063\243\064\250\065\245" +
    "\066\234\104\u0144\112\246\113\237\114\240\115\241\116" +
    "\244\117\236\121\251\124\242\001\002\000\054\014\uff38" +
    "\047\uff38\050\uff38\051\uff38\063\uff38\064\uff38\065\uff38\066" +
    "\uff38\072\uff38\102\uff38\104\uff38\105\uff38\111\uff38\112\uff38" +
    "\113\uff38\114\uff38\115\uff38\116\uff38\117\uff38\121\uff38\124" +
    "\uff38\001\002\000\054\014\uff52\047\uff52\050\uff52\051\uff52" +
    "\063\uff52\064\uff52\065\uff52\066\uff52\072\uff52\102\uff52\104" +
    "\uff52\105\uff52\111\uff52\112\uff52\113\uff52\114\uff52\115\uff52" +
    "\116\uff52\117\uff52\121\uff52\124\uff52\001\002\000\054\014" +
    "\uff47\047\uff47\050\uff47\051\uff47\063\uff47\064\uff47\065\uff47" +
    "\066\uff47\072\uff47\102\uff47\104\uff47\105\uff47\111\uff47\112" +
    "\uff47\113\uff47\114\uff47\115\uff47\116\uff47\117\uff47\121\uff47" +
    "\124\uff47\001\002\000\054\014\uff5e\047\uff5e\050\uff5e\051" +
    "\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e\072\uff5e\102\uff5e" +
    "\104\uff5e\105\uff5e\111\uff5e\112\uff5e\113\uff5e\114\uff5e\115" +
    "\uff5e\116\uff5e\117\uff5e\121\uff5e\124\uff5e\001\002\000\004" +
    "\107\u0149\001\002\000\106\037\213\040\225\041\214\042" +
    "\222\044\166\045\211\046\216\052\177\053\223\054\227" +
    "\055\206\056\226\057\212\060\200\061\224\062\167\063" +
    "\202\066\176\067\203\073\220\076\205\077\207\100\174" +
    "\101\215\103\173\106\221\112\175\122\210\123\230\126" +
    "\172\127\171\130\217\131\231\141\201\001\002\000\042" +
    "\047\235\050\253\051\252\063\243\064\250\065\245\066" +
    "\234\105\u014c\112\246\113\237\114\u014b\115\241\116\244" +
    "\117\236\121\251\124\242\001\002\000\152\014\uff70\037" +
    "\213\040\225\041\214\042\222\044\166\045\211\046\216" +
    "\047\uff70\050\uff70\051\uff70\052\177\053\223\054\227\055" +
    "\206\056\226\057\212\060\200\061\224\062\167\063\202" +
    "\064\uff70\065\uff70\066\176\067\203\072\uff70\073\220\076" +
    "\205\077\207\100\174\101\215\102\uff70\103\173\104\uff70" +
    "\105\uff70\106\221\111\uff70\112\uff70\113\uff70\114\uff70\115" +
    "\uff70\116\uff70\117\uff70\121\uff70\122\210\123\230\124\uff70" +
    "\126\172\127\171\130\217\131\231\141\201\001\002\000" +
    "\010\045\072\130\070\141\071\001\002\000\054\014\uff6f" +
    "\047\uff6f\050\uff6f\051\uff6f\063\uff6f\064\uff6f\065\uff6f\066" +
    "\uff6f\072\uff6f\102\uff6f\104\uff6f\105\uff6f\111\uff6f\112\uff6f" +
    "\113\uff6f\114\uff6f\115\uff6f\116\uff6f\117\uff6f\121\uff6f\124" +
    "\uff6f\001\002\000\004\130\u014f\001\002\000\004\105\u0150" +
    "\001\002\000\106\037\213\040\225\041\214\042\222\044" +
    "\166\045\211\046\216\052\177\053\223\054\227\055\206" +
    "\056\226\057\212\060\200\061\224\062\167\063\202\066" +
    "\176\067\203\073\220\076\205\077\207\100\174\101\215" +
    "\103\173\106\221\112\175\122\210\123\230\126\172\127" +
    "\171\130\217\131\231\141\201\001\002\000\042\047\235" +
    "\050\253\051\252\063\243\064\250\065\245\066\234\105" +
    "\u0152\112\246\113\237\114\240\115\241\116\244\117\236" +
    "\121\251\124\242\001\002\000\010\045\072\130\070\141" +
    "\071\001\002\000\004\104\u0154\001\002\000\054\014\uff35" +
    "\047\uff35\050\uff35\051\uff35\063\uff35\064\uff35\065\uff35\066" +
    "\uff35\072\uff35\102\uff35\104\uff35\105\uff35\111\uff35\112\uff35" +
    "\113\uff35\114\uff35\115\uff35\116\uff35\117\uff35\121\uff35\124" +
    "\uff35\001\002\000\042\047\235\050\253\051\252\063\243" +
    "\064\250\065\245\066\234\104\u0156\112\246\113\237\114" +
    "\240\115\241\116\244\117\236\121\251\124\242\001\002" +
    "\000\054\014\uff5c\047\uff5c\050\uff5c\051\uff5c\063\uff5c\064" +
    "\uff5c\065\uff5c\066\uff5c\072\uff5c\102\uff5c\104\uff5c\105\uff5c" +
    "\111\uff5c\112\uff5c\113\uff5c\114\uff5c\115\uff5c\116\uff5c\117" +
    "\uff5c\121\uff5c\124\uff5c\001\002\000\004\102\uffbe\001\002" +
    "\000\106\037\213\040\225\041\214\042\222\044\166\045" +
    "\211\046\216\052\177\053\223\054\227\055\206\056\226" +
    "\057\212\060\200\061\224\062\167\063\202\066\176\067" +
    "\203\073\220\076\205\077\207\100\174\101\215\103\173" +
    "\106\221\112\175\122\210\123\230\126\172\127\171\130" +
    "\217\131\231\141\201\001\002\000\042\047\235\050\253" +
    "\051\252\063\243\064\250\065\245\066\234\104\u015a\112" +
    "\246\113\237\114\240\115\241\116\244\117\236\121\251" +
    "\124\242\001\002\000\054\014\uff37\047\uff37\050\uff37\051" +
    "\uff37\063\uff37\064\uff37\065\uff37\066\uff37\072\uff37\102\uff37" +
    "\104\uff37\105\uff37\111\uff37\112\uff37\113\uff37\114\uff37\115" +
    "\uff37\116\uff37\117\uff37\121\uff37\124\uff37\001\002\000\004" +
    "\013\u015c\001\002\000\004\131\300\001\002\000\004\014" +
    "\u015e\001\002\000\106\037\213\040\225\041\214\042\222" +
    "\044\166\045\211\046\216\052\177\053\223\054\227\055" +
    "\206\056\226\057\212\060\200\061\224\062\167\063\202" +
    "\066\176\067\203\073\220\076\205\077\207\100\174\101" +
    "\215\103\173\106\221\112\175\122\210\123\230\126\172" +
    "\127\171\130\217\131\231\141\201\001\002\000\054\014" +
    "\uff4c\047\235\050\253\051\252\063\243\064\250\065\245" +
    "\066\234\072\uff4c\102\uff4c\104\uff4c\105\uff4c\111\uff4c\112" +
    "\246\113\237\114\240\115\241\116\244\117\236\121\251" +
    "\124\242\001\002\000\004\130\u0161\001\002\000\004\102" +
    "\u0162\001\002\000\012\006\026\010\u0165\011\u0166\025\u0163" +
    "\001\002\000\004\120\u01bf\001\002\000\004\102\u01b9\001" +
    "\002\000\004\013\u017d\001\002\000\004\013\u0167\001\002" +
    "\000\006\052\031\130\033\001\002\000\004\014\u0169\001" +
    "\002\000\004\102\u016a\001\002\000\006\006\026\025\u016b" +
    "\001\002\000\004\120\u0173\001\002\000\004\102\u016d\001" +
    "\002\000\004\007\u016e\001\002\000\004\120\u016f\001\002" +
    "\000\004\127\u0170\001\002\000\004\102\u0171\001\002\000" +
    "\004\014\u0172\001\002\000\012\002\uff24\004\uff24\005\uff24" +
    "\030\uff24\001\002\000\006\024\051\126\050\001\002\000" +
    "\004\102\u0175\001\002\000\004\006\026\001\002\000\004" +
    "\102\u0177\001\002\000\004\007\u0178\001\002\000\004\120" +
    "\u0179\001\002\000\004\127\u017a\001\002\000\004\102\u017b" +
    "\001\002\000\004\014\u017c\001\002\000\012\002\uff2c\004" +
    "\uff2c\005\uff2c\030\uff2c\001\002\000\004\130\u0180\001\002" +
    "\000\006\014\uff96\130\u0180\001\002\000\004\014\u018d\001" +
    "\002\000\004\107\u0181\001\002\000\004\013\u0182\001\002" +
    "\000\006\045\u0184\130\u0183\001\002\000\006\014\uff8b\105" +
    "\u018b\001\002\000\004\130\u0188\001\002\000\004\014\u0186" +
    "\001\002\000\004\102\u0187\001\002\000\006\014\uff94\130" +
    "\uff94\001\002\000\006\014\uff89\105\u0189\001\002\000\006" +
    "\045\u0184\130\u0183\001\002\000\004\014\uff88\001\002\000" +
    "\006\045\u0184\130\u0183\001\002\000\004\014\uff8a\001\002" +
    "\000\004\102\u018e\001\002\000\010\006\026\011\u0191\025" +
    "\u018f\001\002\000\004\120\u01ae\001\002\000\004\102\u01a8" +
    "\001\002\000\004\013\u0192\001\002\000\006\052\031\130" +
    "\033\001\002\000\004\014\u0194\001\002\000\004\102\u0195" +
    "\001\002\000\006\006\026\025\u0196\001\002\000\004\120" +
    "\u019e\001\002\000\004\102\u0198\001\002\000\004\007\u0199" +
    "\001\002\000\004\120\u019a\001\002\000\004\127\u019b\001" +
    "\002\000\004\102\u019c\001\002\000\004\014\u019d\001\002" +
    "\000\012\002\uff26\004\uff26\005\uff26\030\uff26\001\002\000" +
    "\006\024\051\126\050\001\002\000\004\102\u01a0\001\002" +
    "\000\004\006\026\001\002\000\004\102\u01a2\001\002\000" +
    "\004\007\u01a3\001\002\000\004\120\u01a4\001\002\000\004" +
    "\127\u01a5\001\002\000\004\102\u01a6\001\002\000\004\014" +
    "\u01a7\001\002\000\012\002\uff2e\004\uff2e\005\uff2e\030\uff2e" +
    "\001\002\000\004\007\u01a9\001\002\000\004\120\u01aa\001" +
    "\002\000\004\127\u01ab\001\002\000\004\102\u01ac\001\002" +
    "\000\004\014\u01ad\001\002\000\012\002\uff22\004\uff22\005" +
    "\uff22\030\uff22\001\002\000\006\024\051\126\050\001\002" +
    "\000\004\102\u01b0\001\002\000\004\006\026\001\002\000" +
    "\004\102\u01b2\001\002\000\004\007\u01b3\001\002\000\004" +
    "\120\u01b4\001\002\000\004\127\u01b5\001\002\000\004\102" +
    "\u01b6\001\002\000\004\014\u01b7\001\002\000\012\002\uff2a" +
    "\004\uff2a\005\uff2a\030\uff2a\001\002\000\004\014\uff95\001" +
    "\002\000\004\007\u01ba\001\002\000\004\120\u01bb\001\002" +
    "\000\004\127\u01bc\001\002\000\004\102\u01bd\001\002\000" +
    "\004\014\u01be\001\002\000\012\002\uff20\004\uff20\005\uff20" +
    "\030\uff20\001\002\000\006\024\051\126\050\001\002\000" +
    "\004\102\u01c1\001\002\000\004\006\026\001\002\000\004" +
    "\102\u01c3\001\002\000\004\007\u01c4\001\002\000\004\120" +
    "\u01c5\001\002\000\004\127\u01c6\001\002\000\004\102\u01c7" +
    "\001\002\000\004\014\u01c8\001\002\000\012\002\uff28\004" +
    "\uff28\005\uff28\030\uff28\001\002\000\004\130\u0180\001\002" +
    "\000\004\014\u01cb\001\002\000\004\102\u01cc\001\002\000" +
    "\010\006\026\011\u01cf\025\u01cd\001\002\000\004\120\u01ec" +
    "\001\002\000\004\102\u01e6\001\002\000\004\013\u01d0\001" +
    "\002\000\006\052\031\130\033\001\002\000\004\014\u01d2" +
    "\001\002\000\004\102\u01d3\001\002\000\006\006\026\025" +
    "\u01d4\001\002\000\004\120\u01dc\001\002\000\004\102\u01d6" +
    "\001\002\000\004\007\u01d7\001\002\000\004\120\u01d8\001" +
    "\002\000\004\127\u01d9\001\002\000\004\102\u01da\001\002" +
    "\000\004\014\u01db\001\002\000\012\002\uff25\004\uff25\005" +
    "\uff25\030\uff25\001\002\000\006\024\051\126\050\001\002" +
    "\000\004\102\u01de\001\002\000\004\006\026\001\002\000" +
    "\004\102\u01e0\001\002\000\004\007\u01e1\001\002\000\004" +
    "\120\u01e2\001\002\000\004\127\u01e3\001\002\000\004\102" +
    "\u01e4\001\002\000\004\014\u01e5\001\002\000\012\002\uff2d" +
    "\004\uff2d\005\uff2d\030\uff2d\001\002\000\004\007\u01e7\001" +
    "\002\000\004\120\u01e8\001\002\000\004\127\u01e9\001\002" +
    "\000\004\102\u01ea\001\002\000\004\014\u01eb\001\002\000" +
    "\012\002\uff21\004\uff21\005\uff21\030\uff21\001\002\000\006" +
    "\024\051\126\050\001\002\000\004\102\u01ee\001\002\000" +
    "\004\006\026\001\002\000\004\102\u01f0\001\002\000\004" +
    "\007\u01f1\001\002\000\004\120\u01f2\001\002\000\004\127" +
    "\u01f3\001\002\000\004\102\u01f4\001\002\000\004\014\u01f5" +
    "\001\002\000\012\002\uff29\004\uff29\005\uff29\030\uff29\001" +
    "\002\000\004\007\u01f7\001\002\000\004\120\u01f8\001\002" +
    "\000\004\127\u01f9\001\002\000\004\102\u01fa\001\002\000" +
    "\004\014\u01fb\001\002\000\012\002\uff1f\004\uff1f\005\uff1f" +
    "\030\uff1f\001\002\000\006\024\051\126\050\001\002\000" +
    "\004\102\u01fe\001\002\000\004\006\026\001\002\000\004" +
    "\102\u0200\001\002\000\004\007\u0201\001\002\000\004\120" +
    "\u0202\001\002\000\004\127\u0203\001\002\000\004\102\u0204" +
    "\001\002\000\004\014\u0205\001\002\000\012\002\uff27\004" +
    "\uff27\005\uff27\030\uff27\001\002\000\004\002\001\001\002" +
    "\000\004\013\u0208\001\002\000\026\010\u0213\012\u0211\017" +
    "\u0218\020\u020f\021\u0219\022\u0209\026\u020b\043\u0217\137\u020c" +
    "\140\u0214\001\002\000\004\013\u02a9\001\002\000\026\010" +
    "\u0213\014\uffe7\017\u0218\020\u020f\021\u0219\022\u0209\026\u020b" +
    "\043\u0217\137\u020c\140\u0214\001\002\000\004\013\u0261\001" +
    "\002\000\004\013\uffab\001\002\000\026\010\u0213\014\uffe8" +
    "\017\u0218\020\u020f\021\u0219\022\u0209\026\u020b\043\u0217\137" +
    "\u020c\140\u0214\001\002\000\026\010\u0213\014\uffeb\017\u0218" +
    "\020\u020f\021\u0219\022\u0209\026\u020b\043\u0217\137\u020c\140" +
    "\u0214\001\002\000\004\013\u0255\001\002\000\026\010\u0213" +
    "\014\uffe9\017\u0218\020\u020f\021\u0219\022\u0209\026\u020b\043" +
    "\u0217\137\u020c\140\u0214\001\002\000\004\120\u024a\001\002" +
    "\000\026\010\u0213\014\uffee\017\u0218\020\u020f\021\u0219\022" +
    "\u0209\026\u020b\043\u0217\137\u020c\140\u0214\001\002\000\004" +
    "\013\u0245\001\002\000\004\013\uffaa\001\002\000\004\014" +
    "\u0244\001\002\000\026\010\u0213\014\uffea\017\u0218\020\u020f" +
    "\021\u0219\022\u0209\026\u020b\043\u0217\137\u020c\140\u0214\001" +
    "\002\000\004\120\u0240\001\002\000\004\013\u0236\001\002" +
    "\000\004\013\u022c\001\002\000\026\010\u0213\014\uffed\017" +
    "\u0218\020\u020f\021\u0219\022\u0209\026\u020b\043\u0217\137\u020c" +
    "\140\u0214\001\002\000\026\010\u0213\014\uffec\017\u0218\020" +
    "\u020f\021\u0219\022\u0209\026\u020b\043\u0217\137\u020c\140\u0214" +
    "\001\002\000\024\010\u0213\017\u0218\020\u020f\021\u0219\022" +
    "\u0209\026\u020b\043\u0217\137\u020c\140\u0214\001\002\000\004" +
    "\013\u021e\001\002\000\004\130\331\001\002\000\004\120" +
    "\u0225\001\002\000\006\014\uffa9\130\331\001\002\000\004" +
    "\014\u0222\001\002\000\004\102\u0223\001\002\000\026\010" +
    "\uffac\014\uffac\017\uffac\020\uffac\021\uffac\022\uffac\026\uffac" +
    "\043\uffac\137\uffac\140\uffac\001\002\000\004\014\uffa8\001" +
    "\002\000\106\037\213\040\225\041\214\042\222\044\166" +
    "\045\211\046\216\052\177\053\223\054\227\055\206\056" +
    "\226\057\212\060\200\061\224\062\167\063\202\066\176" +
    "\067\203\073\220\076\205\077\207\100\174\101\215\103" +
    "\173\106\221\112\175\122\210\123\230\126\172\127\171" +
    "\130\217\131\231\141\201\001\002\000\042\047\235\050" +
    "\253\051\252\063\243\064\250\065\245\066\234\102\u0227" +
    "\112\246\113\237\114\240\115\241\116\244\117\236\121" +
    "\251\124\242\001\002\000\006\014\uffa7\130\uffa7\001\002" +
    "\000\004\014\u0229\001\002\000\012\002\ufffa\004\ufffa\005" +
    "\ufffa\030\ufffa\001\002\000\004\014\ufff4\001\002\000\004" +
    "\014\ufff5\001\002\000\110\014\u0230\037\213\040\225\041" +
    "\214\042\222\044\166\045\211\046\216\052\177\053\223" +
    "\054\227\055\206\056\226\057\212\060\200\061\224\062" +
    "\167\063\202\066\176\067\203\073\220\076\205\077\207" +
    "\100\174\101\215\103\173\106\221\112\175\122\210\123" +
    "\230\126\172\127\171\130\217\131\231\141\201\001\002" +
    "\000\042\047\235\050\253\051\252\063\243\064\250\065" +
    "\245\066\234\102\u0235\112\246\113\237\114\240\115\241" +
    "\116\244\117\236\121\251\124\242\001\002\000\110\014" +
    "\uff99\037\213\040\225\041\214\042\222\044\166\045\211" +
    "\046\216\052\177\053\223\054\227\055\206\056\226\057" +
    "\212\060\200\061\224\062\167\063\202\066\176\067\203" +
    "\073\220\076\205\077\207\100\174\101\215\103\173\106" +
    "\221\112\175\122\210\123\230\126\172\127\171\130\217" +
    "\131\231\141\201\001\002\000\004\014\u0232\001\002\000" +
    "\004\102\u0231\001\002\000\026\010\uff9a\014\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\026\uff9a\043\uff9a\137\uff9a\140" +
    "\uff9a\001\002\000\004\102\u0233\001\002\000\026\010\uff9b" +
    "\014\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\026\uff9b\043" +
    "\uff9b\137\uff9b\140\uff9b\001\002\000\004\014\uff98\001\002" +
    "\000\110\014\uff97\037\uff97\040\uff97\041\uff97\042\uff97\044" +
    "\uff97\045\uff97\046\uff97\052\uff97\053\uff97\054\uff97\055\uff97" +
    "\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\066" +
    "\uff97\067\uff97\073\uff97\076\uff97\077\uff97\100\uff97\101\uff97" +
    "\103\uff97\106\uff97\112\uff97\122\uff97\123\uff97\126\uff97\127" +
    "\uff97\130\uff97\131\uff97\141\uff97\001\002\000\110\014\u0239" +
    "\037\213\040\225\041\214\042\222\044\166\045\211\046" +
    "\216\052\177\053\223\054\227\055\206\056\226\057\212" +
    "\060\200\061\224\062\167\063\202\066\176\067\203\073" +
    "\220\076\205\077\207\100\174\101\215\103\173\106\221" +
    "\112\175\122\210\123\230\126\172\127\171\130\217\131" +
    "\231\141\201\001\002\000\042\047\235\050\253\051\252" +
    "\063\243\064\250\065\245\066\234\102\u023f\112\246\113" +
    "\237\114\240\115\241\116\244\117\236\121\251\124\242" +
    "\001\002\000\004\014\u023d\001\002\000\004\102\u023c\001" +
    "\002\000\110\014\uffa3\037\213\040\225\041\214\042\222" +
    "\044\166\045\211\046\216\052\177\053\223\054\227\055" +
    "\206\056\226\057\212\060\200\061\224\062\167\063\202" +
    "\066\176\067\203\073\220\076\205\077\207\100\174\101" +
    "\215\103\173\106\221\112\175\122\210\123\230\126\172" +
    "\127\171\130\217\131\231\141\201\001\002\000\004\014" +
    "\uffa2\001\002\000\026\010\uffa4\014\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\026\uffa4\043\uffa4\137\uffa4\140\uffa4\001" +
    "\002\000\004\102\u023e\001\002\000\026\010\uffa5\014\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\026\uffa5\043\uffa5\137" +
    "\uffa5\140\uffa5\001\002\000\110\014\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\044\uffa1\045\uffa1\046\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\066\uffa1\067\uffa1\073\uffa1\076\uffa1\077" +
    "\uffa1\100\uffa1\101\uffa1\103\uffa1\106\uffa1\112\uffa1\122\uffa1" +
    "\123\uffa1\126\uffa1\127\uffa1\130\uffa1\131\uffa1\141\uffa1\001" +
    "\002\000\106\037\213\040\225\041\214\042\222\044\166" +
    "\045\211\046\216\052\177\053\223\054\227\055\206\056" +
    "\226\057\212\060\200\061\224\062\167\063\202\066\176" +
    "\067\203\073\220\076\205\077\207\100\174\101\215\103" +
    "\173\106\221\112\175\122\210\123\230\126\172\127\171" +
    "\130\217\131\231\141\201\001\002\000\042\047\235\050" +
    "\253\051\252\063\243\064\250\065\245\066\234\102\u0242" +
    "\112\246\113\237\114\240\115\241\116\244\117\236\121" +
    "\251\124\242\001\002\000\026\010\uffa6\014\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\026\uffa6\043\uffa6\137\uffa6\140" +
    "\uffa6\001\002\000\004\014\ufff2\001\002\000\012\002\ufff9" +
    "\004\ufff9\005\ufff9\030\ufff9\001\002\000\004\130\u0180\001" +
    "\002\000\004\014\u0247\001\002\000\004\102\u0248\001\002" +
    "\000\026\010\uffe6\014\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\026\uffe6\043\uffe6\137\uffe6\140\uffe6\001\002\000\004" +
    "\014\ufff6\001\002\000\004\013\u024b\001\002\000\006\014" +
    "\u024e\130\u024d\001\002\000\004\014\u0252\001\002\000\006" +
    "\014\uffda\105\u0250\001\002\000\004\102\u024f\001\002\000" +
    "\024\010\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\026\ufff7" +
    "\043\ufff7\137\ufff7\140\ufff7\001\002\000\004\130\u024d\001" +
    "\002\000\004\014\uffd9\001\002\000\004\102\u0253\001\002" +
    "\000\024\010\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\026" +
    "\ufff8\043\ufff8\137\ufff8\140\ufff8\001\002\000\004\014\ufff1" +
    "\001\002\000\110\014\u0259\037\213\040\225\041\214\042" +
    "\222\044\166\045\211\046\216\052\177\053\223\054\227" +
    "\055\206\056\226\057\212\060\200\061\224\062\167\063" +
    "\202\066\176\067\203\073\220\076\205\077\207\100\174" +
    "\101\215\103\173\106\221\112\175\122\210\123\230\126" +
    "\172\127\171\130\217\131\231\141\201\001\002\000\004" +
    "\014\u025d\001\002\000\042\047\235\050\253\051\252\063" +
    "\243\064\250\065\245\066\234\102\u025c\112\246\113\237" +
    "\114\240\115\241\116\244\117\236\121\251\124\242\001" +
    "\002\000\110\014\uff9e\037\213\040\225\041\214\042\222" +
    "\044\166\045\211\046\216\052\177\053\223\054\227\055" +
    "\206\056\226\057\212\060\200\061\224\062\167\063\202" +
    "\066\176\067\203\073\220\076\205\077\207\100\174\101" +
    "\215\103\173\106\221\112\175\122\210\123\230\126\172" +
    "\127\171\130\217\131\231\141\201\001\002\000\004\102" +
    "\u025a\001\002\000\026\010\uff9f\014\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\026\uff9f\043\uff9f\137\uff9f\140\uff9f\001" +
    "\002\000\004\014\uff9d\001\002\000\110\014\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\044\uff9c\045\uff9c\046\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\063\uff9c\066\uff9c\067\uff9c\073\uff9c\076" +
    "\uff9c\077\uff9c\100\uff9c\101\uff9c\103\uff9c\106\uff9c\112\uff9c" +
    "\122\uff9c\123\uff9c\126\uff9c\127\uff9c\130\uff9c\131\uff9c\141" +
    "\uff9c\001\002\000\004\102\u025e\001\002\000\026\010\uffa0" +
    "\014\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\026\uffa0\043" +
    "\uffa0\137\uffa0\140\uffa0\001\002\000\004\014\ufff3\001\002" +
    "\000\004\014\ufff0\001\002\000\004\130\u0263\001\002\000" +
    "\004\014\u02a6\001\002\000\006\103\u0267\107\u0266\001\002" +
    "\000\006\014\uffb4\130\u0263\001\002\000\004\014\uffb3\001" +
    "\002\000\004\013\uffbd\001\002\000\012\130\u0273\133\u0274" +
    "\134\u0275\135\u0271\001\002\000\004\013\u0269\001\002\000" +
    "\016\015\u026c\027\u026d\032\u026a\033\u026f\034\u026b\136\u026e" +
    "\001\002\000\004\105\u0298\001\002\000\004\105\u0290\001" +
    "\002\000\004\105\u0288\001\002\000\004\105\u0280\001\002" +
    "\000\004\105\u0278\001\002\000\004\105\u0270\001\002\000" +
    "\012\130\u0273\133\u0274\134\u0275\135\u0271\001\002\000\012" +
    "\014\uffb7\104\uffb7\105\uffb7\114\uffb7\001\002\000\004\014" +
    "\u0276\001\002\000\012\014\uffb9\104\uffb9\105\uffb9\114\uffb9" +
    "\001\002\000\012\014\uffb6\104\uffb6\105\uffb6\114\uffb6\001" +
    "\002\000\012\014\uffb8\104\uffb8\105\uffb8\114\uffb8\001\002" +
    "\000\004\102\u0277\001\002\000\006\014\uffae\130\uffae\001" +
    "\002\000\012\130\u0273\133\u0274\134\u0275\135\u0271\001\002" +
    "\000\004\105\u027a\001\002\000\004\036\u027b\001\002\000" +
    "\004\120\u027c\001\002\000\034\023\105\024\112\045\102" +
    "\066\101\103\120\106\116\112\115\122\111\123\114\126" +
    "\104\127\113\130\103\141\107\001\002\000\004\014\u027e" +
    "\001\002\000\004\102\u027f\001\002\000\006\014\uffb1\130" +
    "\uffb1\001\002\000\012\130\u0273\133\u0274\134\u0275\135\u0271" +
    "\001\002\000\004\105\u0282\001\002\000\004\036\u0283\001" +
    "\002\000\004\120\u0284\001\002\000\034\023\105\024\112" +
    "\045\102\066\101\103\120\106\116\112\115\122\111\123" +
    "\114\126\104\127\113\130\103\141\107\001\002\000\004" +
    "\014\u0286\001\002\000\004\102\u0287\001\002\000\006\014" +
    "\uffb2\130\uffb2\001\002\000\012\130\u0273\133\u0274\134\u0275" +
    "\135\u0271\001\002\000\004\105\u028a\001\002\000\004\035" +
    "\u028b\001\002\000\004\120\u028c\001\002\000\004\126\u028d" +
    "\001\002\000\004\014\u028e\001\002\000\004\102\u028f\001" +
    "\002\000\006\014\uffaf\130\uffaf\001\002\000\012\130\u0273" +
    "\133\u0274\134\u0275\135\u0271\001\002\000\004\105\u0292\001" +
    "\002\000\004\036\u0293\001\002\000\004\120\u0294\001\002" +
    "\000\034\023\105\024\112\045\102\066\101\103\120\106" +
    "\116\112\115\122\111\123\114\126\104\127\113\130\103" +
    "\141\107\001\002\000\004\014\u0296\001\002\000\004\102" +
    "\u0297\001\002\000\006\014\uffad\130\uffad\001\002\000\012" +
    "\130\u0273\133\u0274\134\u0275\135\u0271\001\002\000\004\105" +
    "\u029a\001\002\000\004\035\u029b\001\002\000\004\120\u029c" +
    "\001\002\000\004\126\u029d\001\002\000\004\014\u029e\001" +
    "\002\000\004\102\u029f\001\002\000\006\014\uffb0\130\uffb0" +
    "\001\002\000\006\104\uffbb\105\u02a4\001\002\000\004\104" +
    "\u02a2\001\002\000\004\107\u02a3\001\002\000\004\013\uffbc" +
    "\001\002\000\012\130\u0273\133\u0274\134\u0275\135\u0271\001" +
    "\002\000\004\104\uffba\001\002\000\004\102\u02a7\001\002" +
    "\000\026\010\uffb5\014\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\026\uffb5\043\uffb5\137\uffb5\140\uffb5\001\002\000\004" +
    "\014\uffef\001\002\000\004\130\u02ac\001\002\000\006\014" +
    "\uffe4\130\u02ac\001\002\000\004\014\u02d1\001\002\000\004" +
    "\107\u02ad\001\002\000\014\013\u02af\106\u02b0\112\u02b1\130" +
    "\u02b2\132\u02ae\001\002\000\004\102\u02d0\001\002\000\004" +
    "\141\u02c4\001\002\000\004\130\u02bc\001\002\000\010\045" +
    "\072\130\070\141\071\001\002\000\004\102\u02b3\001\002" +
    "\000\006\014\uffe1\130\uffe1\001\002\000\004\107\u02b8\001" +
    "\002\000\004\114\u02b6\001\002\000\004\102\u02b7\001\002" +
    "\000\006\014\uffdd\130\uffdd\001\002\000\012\130\u0273\133" +
    "\u0274\134\u0275\135\u0271\001\002\000\006\105\u02ba\114\uffdc" +
    "\001\002\000\010\045\072\130\070\141\071\001\002\000" +
    "\004\114\uffdb\001\002\000\004\111\u02bd\001\002\000\004" +
    "\112\u02be\001\002\000\004\110\u02bf\001\002\000\004\107" +
    "\u02c0\001\002\000\012\130\u0273\133\u0274\134\u0275\135\u0271" +
    "\001\002\000\004\114\u02c2\001\002\000\004\102\u02c3\001" +
    "\002\000\006\014\uffde\130\uffde\001\002\000\010\014\uffd8" +
    "\074\u02c9\105\u02c8\001\002\000\004\014\u02c6\001\002\000" +
    "\004\102\u02c7\001\002\000\006\014\uffe0\130\uffe0\001\002" +
    "\000\004\141\u02ce\001\002\000\004\074\u02ca\001\002\000" +
    "\004\141\u02cb\001\002\000\004\014\u02cc\001\002\000\004" +
    "\102\u02cd\001\002\000\006\014\uffdf\130\uffdf\001\002\000" +
    "\006\014\uffd8\105\u02c8\001\002\000\004\014\uffd7\001\002" +
    "\000\006\014\uffe2\130\uffe2\001\002\000\004\102\u02d2\001" +
    "\002\000\026\010\uffe5\014\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\026\uffe5\043\uffe5\137\uffe5\140\uffe5\001\002\000" +
    "\004\014\uffe3\001\002\000\004\002\ufffe\001\002\000\004" +
    "\013\u02d6\001\002\000\004\004\u02d7\001\002\000\004\120" +
    "\u02d8\001\002\000\004\130\u02d9\001\002\000\004\102\u02da" +
    "\001\002\000\006\010\u02db\030\u02dc\001\002\000\004\013" +
    "\u02e0\001\002\000\006\052\031\130\033\001\002\000\004" +
    "\102\u02de\001\002\000\004\014\u02df\001\002\000\012\002" +
    "\uff2f\004\uff2f\005\uff2f\030\uff2f\001\002\000\004\130\u0180" +
    "\001\002\000\004\014\u02e2\001\002\000\004\102\u02e3\001" +
    "\002\000\004\030\u02e4\001\002\000\004\013\u02e5\001\002" +
    "\000\006\052\031\130\033\001\002\000\004\014\u02e7\001" +
    "\002\000\004\102\u02e8\001\002\000\004\014\u02e9\001\002" +
    "\000\012\002\uff30\004\uff30\005\uff30\030\uff30\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02e8\000\012\003\007\004\003\006\011\007\005\001" +
    "\001\000\012\003\u02e9\004\003\006\011\007\005\001\001" +
    "\000\002\001\001\000\012\003\u02d3\004\003\006\011\007" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\012\004\003\006\011\007\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\033\064\031\001\001\000\002" +
    "\001\001\000\006\063\152\064\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\052\150\053\120\054\105\057\107\001\001\000\006" +
    "\065\065\066\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\065\074\066\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\052\116\053\120\054\105\057\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\143\015\122\066" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\124\015\122\066" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\052\127\053\120\054" +
    "\105\057\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\052\133\053\120\054\105\057" +
    "\107\001\001\000\002\001\001\000\006\015\135\066\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\140\015\122\066\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\065\156\066\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\203\062\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\203\062\u0154\001\001\000" +
    "\002\001\001\000\006\030\u0146\066\u0147\001\001\000\006" +
    "\061\203\062\u0145\001\001\000\006\061\203\062\u0144\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\061\203" +
    "\062\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\353\001\001\000\002\001\001\000\006\061" +
    "\203\062\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\061\203\062\232\001\001\000\002\001\001\000\006\061" +
    "\203\062\271\001\001\000\006\061\203\062\270\001\001" +
    "\000\006\061\203\062\267\001\001\000\006\061\203\062" +
    "\266\001\001\000\006\061\203\062\265\001\001\000\006" +
    "\061\203\062\264\001\001\000\006\061\203\062\263\001" +
    "\001\000\006\061\203\062\262\001\001\000\006\061\203" +
    "\062\261\001\001\000\006\061\203\062\260\001\001\000" +
    "\006\061\203\062\257\001\001\000\002\001\001\000\006" +
    "\061\203\062\256\001\001\000\006\061\203\062\255\001" +
    "\001\000\006\061\203\062\254\001\001\000\006\061\203" +
    "\062\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\203\062\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\072\300\073\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\072\303\073\301\001\001\000\002\001\001\000" +
    "\006\061\203\062\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\061\203\062\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\061\203" +
    "\062\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\072\320\073\301\001\001\000\002" +
    "\001\001\000\006\061\203\062\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\061\327" +
    "\070\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\075\340\076" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\327\070\342\001\001\000\002\001" +
    "\001\000\006\061\203\062\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\075\347\076\337\001\001\000" +
    "\002\001\001\000\006\061\203\062\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\061" +
    "\327\067\374\070\375\001\001\000\004\071\360\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\372\001" +
    "\001\000\004\061\370\001\001\000\002\001\001\000\004" +
    "\061\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\061\327\067\377" +
    "\070\375\001\001\000\002\001\001\000\004\047\u0101\001" +
    "\001\000\002\001\001\000\010\061\203\062\u0103\077\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\061\203\062\u0103\077\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\072\u010a\073\301\001" +
    "\001\000\002\001\001\000\006\061\203\062\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\203\062\u0110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\072\u0114\073\301\001" +
    "\001\000\002\001\001\000\006\061\203\062\u0116\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\072\u0119\073" +
    "\301\001\001\000\002\001\001\000\006\061\203\062\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\066\u011f\074\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\061\203\062" +
    "\u0124\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\066\u011f\074\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\061\203\062\u0129\001\001\000\002\001\001" +
    "\000\006\061\203\062\u012b\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\061\203\062\u012e\001\001\000\002" +
    "\001\001\000\006\061\203\062\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\061\203\062\u0133\001\001" +
    "\000\002\001\001\000\006\061\203\062\u0135\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\203\062\u0138" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\061" +
    "\203\062\u013b\001\001\000\002\001\001\000\006\061\203" +
    "\062\u013d\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\203\062\u0140\001\001\000\002\001\001\000\006" +
    "\061\203\062\u0142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\203\062\u0149\001\001\000" +
    "\002\001\001\000\006\061\203\062\265\001\001\000\006" +
    "\030\u014c\066\u0147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\061\203\062\u0150\001\001" +
    "\000\002\001\001\000\006\066\u011f\074\u0152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\061\203\062\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\072\u015c\073\301\001\001\000\002\001\001\000" +
    "\006\061\203\062\u015e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u0163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\063\u0167\064\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\u016b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0173\001\001\000\002\001" +
    "\001\000\004\056\u0175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\u017e" +
    "\050\u017d\001\001\000\006\045\u01b7\050\u017d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u0184\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u0189\001\001\000\002\001\001\000" +
    "\004\044\u018b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\u018f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\063\u0192\064\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u0196\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u019e\001\001" +
    "\000\002\001\001\000\004\056\u01a0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\u01ae\001\001\000\002\001\001\000\004\056\u01b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u01bf\001\001\000\002\001" +
    "\001\000\004\056\u01c1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\u01c9" +
    "\050\u017d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\u01cd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\063\u01d0\064\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\u01d4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u01dc\001\001\000" +
    "\002\001\001\000\004\056\u01de\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\u01ec" +
    "\001\001\000\002\001\001\000\004\056\u01ee\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\u01fc\001\001\000\002\001\001\000\004\056\u01fe" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\u0214\010\u021b\011\u0211\023\u0219\026\u021a\032\u020d" +
    "\033\u0215\036\u020f\041\u020c\046\u0209\060\u021c\001\001\000" +
    "\002\001\001\000\026\005\u02a7\011\u0211\023\u0219\026\u021a" +
    "\032\u020d\033\u0215\036\u020f\041\u020c\046\u0209\060\u021c\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u025f" +
    "\011\u0211\023\u0219\026\u021a\032\u020d\033\u0215\036\u020f\041" +
    "\u020c\046\u0209\060\u021c\001\001\000\026\005\u025e\011\u0211" +
    "\023\u0219\026\u021a\032\u020d\033\u0215\036\u020f\041\u020c\046" +
    "\u0209\060\u021c\001\001\000\002\001\001\000\026\005\u0253" +
    "\011\u0211\023\u0219\026\u021a\032\u020d\033\u0215\036\u020f\041" +
    "\u020c\046\u0209\060\u021c\001\001\000\002\001\001\000\026" +
    "\005\u0248\011\u0211\023\u0219\026\u021a\032\u020d\033\u0215\036" +
    "\u020f\041\u020c\046\u0209\060\u021c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0242\011" +
    "\u0211\023\u0219\026\u021a\032\u020d\033\u0215\036\u020f\041\u020c" +
    "\046\u0209\060\u021c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u022a\011\u0211\023\u0219" +
    "\026\u021a\032\u020d\033\u0215\036\u020f\041\u020c\046\u0209\060" +
    "\u021c\001\001\000\026\005\u0229\011\u0211\023\u0219\026\u021a" +
    "\032\u020d\033\u0215\036\u020f\041\u020c\046\u0209\060\u021c\001" +
    "\001\000\026\005\u0227\011\u0211\023\u0219\026\u021a\032\u020d" +
    "\033\u0215\036\u020f\041\u020c\046\u0209\060\u021c\001\001\000" +
    "\002\001\001\000\010\027\u0220\031\u021f\061\u021e\001\001" +
    "\000\002\001\001\000\010\027\u0223\031\u021f\061\u021e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\203\062\u0225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\042" +
    "\u022e\043\u022d\061\203\062\u022c\001\001\000\002\001\001" +
    "\000\012\042\u0233\043\u022d\061\203\062\u022c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\u0237\035\u0239\061\203\062\u0236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\u023a\035\u0239\061\203\062\u0236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\061\203\062\u0240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\u0245\050\u017d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u024b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\037" +
    "\u0255\040\u0257\061\203\062\u0256\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\037\u025a\040\u0257\061\203\062" +
    "\u0256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\u0261" +
    "\025\u0263\001\001\000\002\001\001\000\004\016\u0267\001" +
    "\001\000\006\024\u0264\025\u0263\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\u02a0\021\u029f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u0271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0278\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\052\u027c\053\120\054\105" +
    "\057\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u0280\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\052\u0284\053" +
    "\120\054\105\057\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u0288\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0290\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\052\u0294\053\120\054" +
    "\105\057\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0298\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u02a4\021\u029f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u02aa\022\u02a9\001\001\000\006\013\u02d2\022" +
    "\u02a9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u02c4\001\001\000" +
    "\002\001\001\000\006\020\u02b4\066\u02b3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u02b8" +
    "\001\001\000\002\001\001\000\006\020\u02ba\066\u02b3\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u02c0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u02ce\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\063\u02dc\064\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\u02e0\050\u017d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\063\u02e5\064\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	// Just a testing interface (loads formula from file)
	public static void main(String args[]) throws Exception {
	    if (args.length == 0 || args.length > 2) 
			usageAndExit();
	    else if (args.length == 2 && args[1].equalsIgnoreCase("-prefix-output"))
	    	RDDL.USE_PREFIX = true; // Set prefix output
	    else if (args.length == 2) {
	    	System.out.println("Unrecognized option: " + args[1]);
	    	usageAndExit();
	    }
		RDDL rddl = parse(new File(args[0]));
		System.out.println(rddl);
    }

	public static void usageAndExit() {
		System.out.println("Usage: RDDL-filename [-prefix-output]");
	    System.exit(1);	
	}

	// The main runtime method to call
	public static RDDL parse(String s) 
 		throws ParseException {

            Yylex  lex  = null;
		    Symbol rval = null;
            parser p = null;
	        try {
	           lex = new Yylex(new StringReader(s));
	           p = new parser(lex);
		       rval = p.parse();

            } catch (Exception e) {
               int cur_line = (lex != null) ? lex.yyline() + 1 : -1;
               String cur_token = "[NOT AVAILABLE]";
               try {
            	   cur_token = "#" + p.cur_token.sym + ": '" + p.cur_token.value + "'";
               } catch (Exception e2) { /* discard */ }
               String next_token = "[NOT AVAILABLE]";
               try {
                  Symbol s2 = lex.next_token();
                  next_token = "#" + s2.sym + ": '" + s2.value + "'";
               } catch (Exception e2) { /* discard */ }
	           System.out.println("Error on line " + 
				      ((lex != null) ? ""+ cur_line + ", cur token: " + cur_token + ", next token: " + next_token : "") 
	 			      + "\nException: " + e);
		       //e.printStackTrace();
            }

            return (RDDL)rval.value;		
	}

	// The main runtime method to call
	public static RDDL parse(File f) 
 		throws Exception {

            Yylex  lex  = null;
		    Symbol rval = null;
            parser p = null;
	        try {
	           lex = new Yylex(new FileInputStream(f));
	           p = new parser(lex);
		       rval = p.parse();

            } catch (FileNotFoundException fne) {
            	System.out.println("ERROR: Could not find file: '" + f + "'");
            } catch (Exception e) {
               int cur_line = (lex != null) ? lex.yyline() + 1 : -1;
               String cur_token = "[NOT AVAILABLE]";
               try {
            	   cur_token = "#" + p.cur_token.sym + ": '" + p.cur_token.value + "'";
               } catch (Exception e2) { /* discard */ }
               String next_token = "[NOT AVAILABLE]";
               try {
                  Symbol s2 = lex.next_token();
                  next_token = "#" + s2.sym + ": '" + s2.value + "'";
               } catch (Exception e2) { /* discard */ }
	           System.out.println("Error on line " + 
				      ((lex != null) ? ""+ cur_line + ", cur token: " + cur_token + ", next token: " + next_token : "?") 
	 			      + "\nException: " + e);
		       //e.printStackTrace();
            }

            return (RDDL)rval.value;		
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,new ArrayList(),null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,new ArrayList(),null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,objects,new ArrayList(),null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,objects,new ArrayList(),null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,state_list,null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,state_list,null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,objects,state_list,null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-26)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,objects,state_list,null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-20)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,objects,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,objects,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-26)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,objects,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-30)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-30)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-30)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-26)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,objects,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-31)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NONFLUENT_BLOCK ::= NON_FLUENTS IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS PVAR_INST_LIST SEMI RCURLY 
            {
              RDDL.NONFLUENTS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.NONFLUENTS(name,domain,null,nonfluents_list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*NONFLUENT_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NONFLUENT_BLOCK ::= NON_FLUENTS IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI NON_FLUENTS LCURLY PVAR_INST_LIST RCURLY SEMI RCURLY 
            {
              RDDL.NONFLUENTS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new RDDL.NONFLUENTS(name,domain,objects,nonfluents_list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*NONFLUENT_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // EXPR ::= GAMMA LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int shapeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int shaperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR shape = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR scale = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Gamma(shape, scale); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXPR ::= WEIBULL LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int shapeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int shaperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR shape = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR scale = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Weibull(shape, scale); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // EXPR ::= POISSON LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lambdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lambdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR lambda = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Poisson(lambda); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXPR ::= DIRICHLET LPAREN IDENT COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alphaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alpharight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR alpha = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Dirichlet(type, alpha); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXPR ::= MULTINOMIAL LPAREN IDENT COMMA EXPR COMMA LCONST_CASE_LIST RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int countleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR count = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Multinomial(type, count, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXPR ::= DISCRETE LPAREN IDENT COMMA LCONST_CASE_LIST RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Discrete(type, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXPR ::= EXPONENTIAL LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lambdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lambdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR lambda = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Exponential(lambda); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXPR ::= NORMAL LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR mu = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR var = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Normal(mu, var); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXPR ::= UNIFORM LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR l = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR u = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Uniform(l,u); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXPR ::= KRON_DELTA LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR k = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.KronDelta(k); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXPR ::= DIRAC_DELTA LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR d = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.DiracDelta(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXPR ::= BERNOULLI LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int probleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int probright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR prob = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Bernoulli(prob); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXPR ::= SWITCH LPAREN TERM RPAREN LCURLY CASE_LIST RCURLY 
            {
              RDDL.EXPR RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.SWITCH_EXPR(t, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXPR ::= IF LPAREN EXPR RPAREN THEN EXPR ELSE EXPR 
            {
              RDDL.EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		RDDL.EXPR b = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.IF_EXPR(b, e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXPR ::= MAX_OVER UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.AGG_EXPR("max", list, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXPR ::= MIN_OVER UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.AGG_EXPR("min", list, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXPR ::= PROD_OVER UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.AGG_EXPR("prod", list, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXPR ::= SUM_OVER UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.AGG_EXPR("sum", list, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPR ::= EXPR MINUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "-"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPR ::= EXPR PLUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "+"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPR ::= EXPR DIV EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "/"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPR ::= EXPR TIMES EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "*"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPR ::= MINUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(new RDDL.INT_CONST_EXPR(0), e, "-"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPR ::= PLUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPR ::= DOUBLE 
            {
              RDDL.EXPR RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.REAL_CONST_EXPR(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPR ::= INTEGER 
            {
              RDDL.EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.INT_CONST_EXPR(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPR ::= EXISTS UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.QUANT_EXPR("exists", list, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXPR ::= FORALL UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.QUANT_EXPR("forall", list, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXPR ::= EXPR EQUIV EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "<=>"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EXPR ::= EXPR IMPLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "=>"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXPR ::= EXPR OR EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "|"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPR ::= EXPR AMPERSAND EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "^"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPR ::= EXPR AND EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "^"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPR ::= NOT EXPR 
            {
              RDDL.EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.NEG_EXPR(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPR ::= EXPR LESSEQ EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "<="); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPR ::= EXPR LESS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "<"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPR ::= EXPR GREATEREQ EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, ">="); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPR ::= EXPR GREATER EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, ">"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPR ::= EXPR NEQ EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "~="); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPR ::= EXPR COMP_EQUAL EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "=="); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPR ::= FALSE 
            {
              RDDL.EXPR RESULT = null;
		 RESULT = new RDDL.BOOL_CONST_EXPR(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPR ::= TRUE 
            {
              RDDL.EXPR RESULT = null;
		 RESULT = new RDDL.BOOL_CONST_EXPR(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPR ::= IDENT LBRACK EXPR_LIST RBRACK 
            {
              RDDL.EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.FUN_EXPR(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPR ::= LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPR ::= LBRACK EXPR RBRACK 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPR ::= LESS STRUCT_EXPR_LIST 
            {
              RDDL.EXPR RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STRUCT_EXPR s = (RDDL.STRUCT_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPR ::= DOLLAR_SIGN IDENT 
            {
              RDDL.EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPR ::= ENUM_VAL 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPR ::= PVAR_EXPR 
            {
              RDDL.EXPR RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPR ::= VAR 
            {
              RDDL.EXPR RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LVAR(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CASE_DEF ::= DEFAULT COLON EXPR 
            {
              RDDL.CASE RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CASE(null,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*CASE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASE_DEF ::= CASE TERM COLON EXPR 
            {
              RDDL.CASE RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTERM v = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CASE(v,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*CASE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASE_LIST ::= CASE_DEF COMMA CASE_LIST 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.CASE e = (RDDL.CASE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CASE_LIST ::= CASE_DEF 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.CASE e = (RDDL.CASE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPR_LIST ::= EXPR COMMA EXPR_LIST 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPR_LIST ::= EXPR 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LCONST_CASE_LIST ::= LCONST COLON EXPR COMMA LCONST_CASE_LIST 
            {
              ArrayList RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); list.add(0,label); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*LCONST_CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LCONST_CASE_LIST ::= LCONST COLON OTHERWISE 
            {
              ArrayList RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {label, RDDL.Discrete.OTHERWISE_CASE})); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*LCONST_CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LCONST_CASE_LIST ::= LCONST COLON EXPR 
            {
              ArrayList RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {label,e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*LCONST_CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TYPED_VAR ::= VAR COLON IDENT 
            {
              RDDL.LTYPED_VAR RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LTYPED_VAR(var, type); 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*TYPED_VAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TYPED_VAR_LIST ::= TYPED_VAR COMMA TYPED_VAR_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTYPED_VAR t = (RDDL.LTYPED_VAR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*TYPED_VAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TYPED_VAR_LIST ::= TYPED_VAR 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTYPED_VAR t = (RDDL.LTYPED_VAR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*TYPED_VAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // STRUCT_EXPR_LIST ::= LCONST COLON EXPR COMMA STRUCT_EXPR_LIST 
            {
              RDDL.STRUCT_EXPR RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STRUCT_EXPR s = (RDDL.STRUCT_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 s.addMemberAsFirst(label, e); RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*STRUCT_EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // STRUCT_EXPR_LIST ::= LCONST COLON EXPR GREATER 
            {
              RDDL.STRUCT_EXPR RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.STRUCT_EXPR(label, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*STRUCT_EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TERM_LIST ::= TERM COMMA TERM_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*TERM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TERM_LIST ::= TERM 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*TERM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // MEMBER_LIST ::= DOT PTERM MEMBER_LIST 
            {
              ArrayList RESULT = null;
		int memberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int memberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.LTERM member = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,member); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*MEMBER_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // MEMBER_LIST ::= DOT PTERM 
            {
              ArrayList RESULT = null;
		int memberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int memberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM member = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {member})); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*MEMBER_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PTERM ::= DOLLAR_SIGN IDENT 
            {
              RDDL.LTERM RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PTERM ::= ENUM_VAL 
            {
              RDDL.LTERM RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PTERM ::= LBRACK PVAR_EXPR RBRACK 
            {
              RDDL.LTERM RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.TVAR_EXPR(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PTERM ::= LPAREN PVAR_EXPR RPAREN 
            {
              RDDL.LTERM RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.TVAR_EXPR(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PTERM ::= VAR 
            {
              RDDL.LTERM RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LVAR(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PVAR_EXPR ::= IDENT DOT DEFAULT 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, new ArrayList(), new ArrayList(Arrays.asList(new Object[] {RDDL.PVAR_EXPR.DEFAULT}))); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PVAR_EXPR ::= IDENT MEMBER_LIST 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, new ArrayList(), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PVAR_EXPR ::= IDENT 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PVAR_EXPR ::= IDENT LPAREN TERM_LIST RPAREN MEMBER_LIST 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, l, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PVAR_EXPR ::= IDENT LPAREN TERM_LIST RPAREN 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TERM ::= DOLLAR_SIGN IDENT 
            {
              RDDL.LTERM RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TERM ::= ENUM_VAL 
            {
              RDDL.LTERM RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TERM ::= PVAR_EXPR 
            {
              RDDL.LTERM RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.TVAR_EXPR(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TERM ::= VAR 
            {
              RDDL.LTERM RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LVAR(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LCONST ::= ENUM_VAL 
            {
              RDDL.LCONST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LCONST ::= DOLLAR_SIGN IDENT 
            {
              RDDL.LCONST RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LCONST ::= IDENT 
            {
              RDDL.LCONST RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LCONST_LIST ::= LCONST COMMA LCONST_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST i = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,i); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LCONST_LIST ::= LCONST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LCONST i = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {i})); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OBJECT_CONST_LIST ::= DOLLAR_SIGN IDENT COMMA OBJECT_CONST_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.OBJECT_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OBJECT_CONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OBJECT_CONST_LIST ::= DOLLAR_SIGN IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.OBJECT_VAL(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OBJECT_CONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OBJECT_CONST_LIST ::= IDENT COMMA OBJECT_CONST_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.OBJECT_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OBJECT_CONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OBJECT_CONST_LIST ::= IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.OBJECT_VAL(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OBJECT_CONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PVAR_INST_DEF ::= IDENT ASSIGN_EQUAL RANGE_CONST SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, val, new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PVAR_INST_DEF ::= IDENT LPAREN LCONST_LIST RPAREN ASSIGN_EQUAL RANGE_CONST SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, val, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PVAR_INST_DEF ::= NOT IDENT SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(false), new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PVAR_INST_DEF ::= NOT IDENT LPAREN LCONST_LIST RPAREN SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(false), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PVAR_INST_DEF ::= IDENT SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(true), new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PVAR_INST_DEF ::= IDENT LPAREN LCONST_LIST RPAREN SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(true), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PVAR_INST_LIST ::= PVAR_INST_DEF PVAR_INST_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVAR_INST_DEF d = (RDDL.PVAR_INST_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*PVAR_INST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PVAR_INST_LIST ::= PVAR_INST_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_INST_DEF d = (RDDL.PVAR_INST_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*PVAR_INST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OBJECTS_DEF ::= IDENT COLON LCURLY OBJECT_CONST_LIST RCURLY SEMI 
            {
              RDDL.OBJECTS_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.OBJECTS_DEF(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OBJECTS_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OBJECTS_LIST ::= OBJECTS_DEF OBJECTS_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.OBJECTS_DEF d = (RDDL.OBJECTS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*OBJECTS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OBJECTS_LIST ::= OBJECTS_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.OBJECTS_DEF d = (RDDL.OBJECTS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*OBJECTS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // STATE_INVARIANT_DEF ::= EXPR SEMI 
            {
              RDDL.STATE_INVARIANT_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.STATE_INVARIANT_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*STATE_INVARIANT_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // STATE_INVARIANT_LIST ::= STATE_INVARIANT_DEF STATE_INVARIANT_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.STATE_INVARIANT_DEF d = (RDDL.STATE_INVARIANT_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*STATE_INVARIANT_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // STATE_INVARIANT_LIST ::= STATE_INVARIANT_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STATE_INVARIANT_DEF d = (RDDL.STATE_INVARIANT_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*STATE_INVARIANT_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // STATE_INVARIANT_SECTION ::= STATE_INVARIANTS LCURLY RCURLY SEMI 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*STATE_INVARIANT_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // STATE_INVARIANT_SECTION ::= STATE_INVARIANTS LCURLY STATE_INVARIANT_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*STATE_INVARIANT_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ACTION_PRECOND_DEF ::= EXPR SEMI 
            {
              RDDL.ACTION_PRECOND_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.ACTION_PRECOND_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ACTION_PRECOND_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ACTION_PRECOND_LIST ::= ACTION_PRECOND_DEF ACTION_PRECOND_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.ACTION_PRECOND_DEF d = (RDDL.ACTION_PRECOND_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ACTION_PRECOND_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ACTION_PRECOND_LIST ::= ACTION_PRECOND_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.ACTION_PRECOND_DEF d = (RDDL.ACTION_PRECOND_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ACTION_PRECOND_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ACTION_PRECOND_SECTION ::= ACTION_PRECONDITIONS LCURLY RCURLY SEMI 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*ACTION_PRECOND_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ACTION_PRECOND_SECTION ::= ACTION_PRECONDITIONS LCURLY ACTION_PRECOND_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*ACTION_PRECOND_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // STATE_CONS_DEF ::= EXPR SEMI 
            {
              RDDL.STATE_CONS_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.STATE_CONS_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*STATE_CONS_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // STATE_CONS_LIST ::= STATE_CONS_DEF STATE_CONS_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.STATE_CONS_DEF d = (RDDL.STATE_CONS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*STATE_CONS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STATE_CONS_LIST ::= STATE_CONS_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STATE_CONS_DEF d = (RDDL.STATE_CONS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*STATE_CONS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STATE_CONS_SECTION ::= STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*STATE_CONS_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // STATE_CONS_SECTION ::= STATE_ACTION_CONSTRAINTS LCURLY STATE_CONS_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*STATE_CONS_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // REW_SECTION ::= REWARD ASSIGN_EQUAL EXPR SEMI 
            {
              RDDL.REWARD_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.REWARD_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*REW_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CPF_DEF ::= PVAR_EXPR ASSIGN_EQUAL EXPR SEMI 
            {
              RDDL.CPF_DEF RESULT = null;
		int pexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.PVAR_EXPR pexpr = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.CPF_DEF(pexpr, expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*CPF_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CPF_LIST ::= CPF_DEF CPF_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.CPF_DEF d = (RDDL.CPF_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*CPF_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CPF_LIST ::= CPF_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.CPF_DEF d = (RDDL.CPF_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*CPF_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CPF_HEADER ::= CDFS 
            {
              String RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ident; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*CPF_HEADER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CPF_HEADER ::= CPFS 
            {
              String RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ident; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*CPF_HEADER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CPF_SECTION ::= CPF_HEADER LCURLY CPF_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 list.add(0,new RDDL.CPF_HEADER_NAME(ident)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*CPF_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY ACTION COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL RANGE_CONST RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_ACTION_DEF(varname, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY OBSERVATION COMMA TYPE_SPEC RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_OBS_DEF(varname, range, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY DERIVED_FLUENT COMMA TYPE_SPEC COMMA LEVEL ASSIGN_EQUAL INTEGER RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int levelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int levelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer level = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_INTERM_DEF(varname, true /*derived*/, range, list, level); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY INTERMEDIATE COMMA TYPE_SPEC COMMA LEVEL ASSIGN_EQUAL INTEGER RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int levelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int levelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer level = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_INTERM_DEF(varname, false /*not derived*/, range, list, level); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY NON_FLUENT COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL RANGE_CONST RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_STATE_DEF(varname, true, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY STATE COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL RANGE_CONST RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_STATE_DEF(varname, false, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PVAR_LIST ::= PVAR_DEF PVAR_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVARIABLE_DEF d = (RDDL.PVARIABLE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*PVAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PVAR_LIST ::= PVAR_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVARIABLE_DEF d = (RDDL.PVARIABLE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*PVAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PVAR_SECTION ::= PVARIABLES LCURLY PVAR_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*PVAR_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TYPE_SPEC ::= BOOL 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TYPE_SPEC ::= REAL 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TYPE_SPEC ::= INT 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TYPE_SPEC ::= IDENT 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAM_LIST2 ::= TYPE_SPEC COMMA PARAM_LIST2 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*PARAM_LIST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAM_LIST2 ::= TYPE_SPEC 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*PARAM_LIST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAM_LIST ::= LPAREN PARAM_LIST2 RPAREN COLON 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*PARAM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAM_LIST ::= COLON 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*PARAM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // HORIZON_SPEC ::= HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN EXPR RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*HORIZON_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // HORIZON_SPEC ::= HORIZON ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF 
            {
              Object RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*HORIZON_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // POS_INT_TYPE_OR_POS_INF ::= POS_INF 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Integer.MAX_VALUE); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*POS_INT_TYPE_OR_POS_INF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // POS_INT_TYPE_OR_POS_INF ::= INTEGER 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*POS_INT_TYPE_OR_POS_INF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INT_TYPE ::= MINUS INTEGER 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(-i.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INT_TYPE ::= INTEGER 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DOUBLE_TYPE ::= NEG_INF 
            {
              Double RESULT = null;
		 RESULT = new Double(Double.NEGATIVE_INFINITY); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DOUBLE_TYPE ::= POS_INF 
            {
              Double RESULT = null;
		 RESULT = new Double(Double.POSITIVE_INFINITY); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DOUBLE_TYPE ::= MINUS DOUBLE 
            {
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(-d.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DOUBLE_TYPE ::= DOUBLE 
            {
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BOOL_TYPE ::= FALSE 
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*BOOL_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOOL_TYPE ::= TRUE 
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*BOOL_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STRUCT_RANGE_CONST2 ::= LCONST COLON RANGE_CONST COMMA STRUCT_RANGE_CONST2 
            {
              RDDL.STRUCT_VAL RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STRUCT_VAL s = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 s.addMemberAsFirst(label, a); RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*STRUCT_RANGE_CONST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRUCT_RANGE_CONST2 ::= LCONST COLON RANGE_CONST 
            {
              RDDL.STRUCT_VAL RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.STRUCT_VAL(label, a); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*STRUCT_RANGE_CONST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRUCT_RANGE_CONST ::= STRUCT_RANGE_CONST2 
            {
              RDDL.STRUCT_VAL RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STRUCT_VAL v = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*STRUCT_RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRUCT_RANGE_CONST ::= QUESTION COLON RANGE_CONST 
            {
              RDDL.STRUCT_VAL RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.STRUCT_VAL(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*STRUCT_RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RANGE_CONST ::= LBRACK LESS STRUCT_RANGE_CONST GREATER RBRACK 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.STRUCT_VAL s = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RANGE_CONST ::= LPAREN LESS STRUCT_RANGE_CONST GREATER RPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.STRUCT_VAL s = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RANGE_CONST ::= LESS STRUCT_RANGE_CONST GREATER 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.STRUCT_VAL s = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RANGE_CONST ::= ENUM_VAL 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RANGE_CONST ::= DOLLAR_SIGN IDENT 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RANGE_CONST ::= IDENT 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RANGE_CONST ::= INT_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RANGE_CONST ::= DOUBLE_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RANGE_CONST ::= BOOL_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ENUM_LIST ::= ENUM_VAL COMMA ENUM_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.ENUM_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ENUM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ENUM_LIST ::= ENUM_VAL 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.ENUM_VAL(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ENUM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRING_LIST ::= IDENT COMMA STRING_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,i); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*STRING_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRING_LIST ::= IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {i})); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*STRING_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRUCT_MEMBER_LIST ::= LCONST COLON TYPE_SPEC COMMA STRUCT_MEMBER_LIST 
            {
              ArrayList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LCONST name = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0, new RDDL.STRUCT_TYPE_DEF_MEMBER(new RDDL.TYPE_NAME(t), name)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*STRUCT_MEMBER_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRUCT_MEMBER_LIST ::= LCONST COLON TYPE_SPEC 
            {
              ArrayList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST name = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] { new RDDL.STRUCT_TYPE_DEF_MEMBER(new RDDL.TYPE_NAME(t), name)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*STRUCT_MEMBER_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPE_DEF ::= IDENT COLON LESS STRUCT_MEMBER_LIST GREATER SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList members = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.STRUCT_TYPE_DEF(i,members); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE_DEF ::= IDENT COLON LBRACK IDENT RBRACK LESS QUESTION COLON TYPE_SPEC GREATER SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.STRUCT_TYPE_DEF(type,i,t); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPE_DEF ::= IDENT COLON LCURLY ENUM_VAL DOT DOT ENUM_VAL RCURLY SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.ENUM_TYPE_DEF(i,new RDDL.ENUM_VAL(min),new RDDL.ENUM_VAL(max)); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPE_DEF ::= IDENT COLON LCURLY ENUM_LIST RCURLY SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.ENUM_TYPE_DEF(i,el); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPE_DEF ::= IDENT COLON IDENT SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String superclass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.OBJECT_TYPE_DEF(i, superclass); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPE_DEF ::= IDENT COLON OBJECT SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new RDDL.OBJECT_TYPE_DEF(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TYPE_LIST ::= TYPE_DEF TYPE_LIST 
            {
              ArrayList RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.TYPE_DEF def = (RDDL.TYPE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,def); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*TYPE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TYPE_LIST ::= TYPE_DEF 
            {
              ArrayList RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.TYPE_DEF def = (RDDL.TYPE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {def})); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*TYPE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TYPE_SECTION ::= TYPES LCURLY TYPE_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*TYPE_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OBJECTS_SECTION ::= OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = objects; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*OBJECTS_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DOMAIN_LIST ::= OBJECTS_SECTION 
            {
              ArrayList RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList o = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = o; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DOMAIN_LIST ::= STATE_INVARIANT_SECTION 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DOMAIN_LIST ::= ACTION_PRECOND_SECTION 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DOMAIN_LIST ::= STATE_CONS_SECTION 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DOMAIN_LIST ::= REW_SECTION 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.REWARD_DEF r = (RDDL.REWARD_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {r})); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DOMAIN_LIST ::= CPF_SECTION 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DOMAIN_LIST ::= PVAR_SECTION 
            {
              ArrayList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DOMAIN_LIST ::= TYPE_SECTION 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DOMAIN_LIST ::= OBJECTS_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList o = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(o); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DOMAIN_LIST ::= STATE_INVARIANT_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(s); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DOMAIN_LIST ::= ACTION_PRECOND_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(s); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DOMAIN_LIST ::= STATE_CONS_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(s); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DOMAIN_LIST ::= REW_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.REWARD_DEF r = (RDDL.REWARD_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,r);  RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DOMAIN_LIST ::= CPF_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(c); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DOMAIN_LIST ::= PVAR_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DOMAIN_LIST ::= TYPE_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REQ_SECTION ::= REQUIREMENTS ASSIGN_EQUAL LCURLY RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		 RESULT = new RDDL.DOMAIN(new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REQ_SECTION ::= REQUIREMENTS ASSIGN_EQUAL LCURLY STRING_LIST RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.DOMAIN(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DOMAIN_BLOCK ::= DOMAIN IDENT LCURLY DOMAIN_LIST RCURLY 
            {
              RDDL.DOMAIN RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RDDL.DOMAIN domain = new RDDL.DOMAIN(new ArrayList()); domain.setName(name); domain.addDefs(list); RESULT = domain; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*DOMAIN_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DOMAIN_BLOCK ::= DOMAIN IDENT LCURLY REQ_SECTION DOMAIN_LIST RCURLY 
            {
              RDDL.DOMAIN RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.DOMAIN domain = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 domain.setName(name); domain.addDefs(list); RESULT = domain; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*DOMAIN_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RDDL_BLOCK ::= NONFLUENT_BLOCK 
            {
              RDDL RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.NONFLUENTS n = (RDDL.NONFLUENTS)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addNonFluents(n); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RDDL_BLOCK ::= INSTANCE_BLOCK 
            {
              RDDL RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.INSTANCE i = (RDDL.INSTANCE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addInstance(i); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RDDL_BLOCK ::= DOMAIN_BLOCK 
            {
              RDDL RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.DOMAIN d = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addDomain(d); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RDDL_BLOCK ::= NONFLUENT_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.NONFLUENTS n = (RDDL.NONFLUENTS)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addNonFluents(n); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RDDL_BLOCK ::= INSTANCE_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.INSTANCE i = (RDDL.INSTANCE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addInstance(i); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // RDDL_BLOCK ::= DOMAIN_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.DOMAIN d = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addDomain(d);   RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= RDDL_BLOCK EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL start_val = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

